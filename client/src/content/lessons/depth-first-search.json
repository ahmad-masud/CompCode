{
  "title": "Depth-First Search",
  "type": "algorithm",
  "difficulty": "medium",
  "lessons": [
    {
      "title": "Introduction to Depth-First Search",
      "content": [
        {
          "type": "paragraph",
          "text": "**Depth-First Search (DFS)** is a graph traversal algorithm that explores as far as possible along a branch before backtracking. It is used to explore the nodes and edges of a graph in a depth-oriented manner. DFS can be applied to both directed and undirected graphs."
        },
        {
          "type": "paragraph",
          "text": "The primary goal of DFS is to fully explore one path before moving to another. This approach makes it useful in solving problems like detecting cycles, finding connected components, and exploring all nodes in a graph."
        }
      ]
    },
    {
      "title": "Graph Representation (Adjacency List)",
      "content": [
        {
          "type": "paragraph",
          "text": "Graphs can be represented using an **adjacency list**, where each node stores a list of adjacent nodes (its neighbors). This is the most common way to represent graphs for DFS traversal."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Example of an adjacency list representation of a graph\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['D', 'E'],\n    'C': ['F'],\n    'D': [],\n    'E': ['F'],\n    'F': []\n}\n"
        },
        {
          "type": "paragraph",
          "text": "In this adjacency list, each key represents a node, and its value is a list of neighboring nodes. For example, node `'A'` is connected to nodes `'B'` and `'C'`."
        }
      ]
    },
    {
      "title": "Recursive DFS Implementation",
      "content": [
        {
          "type": "paragraph",
          "text": "DFS can be implemented recursively by exploring one branch of the graph deeply and then backtracking once a dead end is reached. The base case for the recursion is when all adjacent nodes of a current node have been visited."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Recursive DFS implementation\ndef dfs_recursive(graph, node, visited=None):\n    if visited is None:\n        visited = set()\n    visited.add(node)\n    print(node, end=' ')\n    for neighbor in graph[node]:\n        if neighbor not in visited:\n            dfs_recursive(graph, neighbor, visited)\n\n# Test the recursive DFS\ndfs_recursive(graph, 'A')  # Output: A B D E F C"
        },
        {
          "type": "paragraph",
          "text": "The `dfs_recursive()` function starts from a given node, marks it as visited, and recursively explores all unvisited neighbors until all nodes connected to the starting node have been visited."
        }
      ]
    },
    {
      "title": "Iterative DFS Implementation (Using a Stack)",
      "content": [
        {
          "type": "paragraph",
          "text": "DFS can also be implemented iteratively using an explicit stack. This approach mimics the recursive behavior by pushing nodes onto a stack and popping them as they are explored."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Iterative DFS implementation\ndef dfs_iterative(graph, start):\n    visited = set()\n    stack = [start]\n    while stack:\n        node = stack.pop()\n        if node not in visited:\n            print(node, end=' ')\n            visited.add(node)\n            # Add neighbors to the stack in reverse order\n            stack.extend(reversed(graph[node]))\n\n# Test the iterative DFS\ndfs_iterative(graph, 'A')  # Output: A B D E F C"
        },
        {
          "type": "paragraph",
          "text": "In the `dfs_iterative()` function, we simulate the recursive behavior by using a stack. We pop nodes off the stack, mark them as visited, and push their unvisited neighbors back onto the stack."
        }
      ]
    },
    {
      "title": "DFS Complexity Analysis",
      "content": [
        {
          "type": "paragraph",
          "text": "The time complexity of DFS is **O(V + E)**, where `V` is the number of vertices (nodes) and `E` is the number of edges in the graph. This is because DFS visits each vertex and each edge exactly once."
        },
        {
          "type": "paragraph",
          "text": "The space complexity of DFS depends on the depth of the recursion or the size of the stack. In the worst case, this can be **O(V)** if the graph is a long chain."
        }
      ]
    },
    {
      "title": "Applications of Depth-First Search",
      "content": [
        {
          "type": "paragraph",
          "text": "DFS is widely used in a variety of applications, including:"
        },
        {
          "type": "bullets",
          "items": [
            "**Pathfinding**: DFS can be used to explore all possible paths in a graph.",
            "**Cycle Detection**: Detecting cycles in a directed or undirected graph.",
            "**Topological Sorting**: DFS is the basis for topological sorting in a Directed Acyclic Graph (DAG).",
            "**Finding Connected Components**: DFS can be used to find all connected components in an undirected graph."
          ]
        }
      ]
    },
    {
      "title": "DFS Limitations",
      "content": [
        {
          "type": "paragraph",
          "text": "While DFS is a powerful graph traversal algorithm, it does not guarantee the shortest path in an unweighted graph. For shortest path problems, algorithms like **Breadth-First Search (BFS)** or **Dijkstra's Algorithm** are preferred."
        },
        {
          "type": "paragraph",
          "text": "DFS can also lead to deep recursion, which may cause a stack overflow if the graph is large and the recursion depth exceeds the system's limit."
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this tutorial, we learned about **Depth-First Search (DFS)**, its recursive and iterative implementations, and its applications. DFS is a versatile and foundational algorithm in graph theory, widely used in solving problems that involve exploring or traversing graphs."
        }
      ]
    }
  ]
}
