{
  "title": "Recursion",
  "type": "concept",
  "difficulty": "medium",
  "lessons": [
    {
      "title": "Introduction to Recursion",
      "content": [
        {
          "type": "paragraph",
          "text": "In computer science, **recursion** is a method of solving problems where a function calls itself as a subroutine. This allows the function to be repeated several times, as it can call itself during its execution. A recursive function typically has two parts: the **base case**, which stops the recursion, and the **recursive case**, which continues the recursion."
        },
        {
          "type": "paragraph",
          "text": "Recursion is commonly used in problems that can be broken down into smaller, similar subproblems, such as tree traversal, divide-and-conquer algorithms, and backtracking."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Basic structure of a recursive function\n\ndef recursive_function(parameters):\n    if base_condition:\n        return base_result  # Base case\n    else:\n        return recursive_function(modified_parameters)  # Recursive case\n"
        },
        {
          "type": "paragraph",
          "text": "In this general example, the recursive function calls itself until it meets a base case that stops further recursion."
        }
      ]
    },
    {
      "title": "Factorial Example (Classic Recursion Problem)",
      "content": [
        {
          "type": "paragraph",
          "text": "The **factorial** of a number `n` is the product of all positive integers less than or equal to `n`. It can be defined recursively as follows:"
        },
        {
          "type": "bullets",
          "items": [
            "`factorial(0) = 1` (base case)",
            "`factorial(n) = n * factorial(n - 1)` (recursive case)"
          ]
        },
        {
          "type": "code",
          "language": "python",
          "code": "def factorial(n):\n    # Base case\n    if n == 0:\n        return 1\n    # Recursive case\n    else:\n        return n * factorial(n - 1)\n\n# Test the factorial function\nprint(factorial(5))  # Output: 120"
        },
        {
          "type": "paragraph",
          "text": "In this example, the factorial function calls itself with a smaller value (`n - 1`) until it reaches the base case where `n == 0`."
        }
      ]
    },
    {
      "title": "Understanding Recursion through Tree Traversal",
      "content": [
        {
          "type": "paragraph",
          "text": "One common use of recursion is **tree traversal**. In tree traversal, we recursively visit each node of the tree starting from the root. The two most common types of tree traversals are **in-order** (left, root, right) and **pre-order** (root, left, right)."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class Node:\n    def __init__(self, data):\n        self.data = data\n        self.left = None\n        self.right = None\n\n# In-order traversal (left, root, right)\ndef in_order_traversal(root):\n    if root:\n        in_order_traversal(root.left)\n        print(root.data, end=' ')\n        in_order_traversal(root.right)\n\n# Pre-order traversal (root, left, right)\ndef pre_order_traversal(root):\n    if root:\n        print(root.data, end=' ')\n        pre_order_traversal(root.left)\n        pre_order_traversal(root.right)\n\n# Creating a sample binary tree\nroot = Node(1)\nroot.left = Node(2)\nroot.right = Node(3)\nroot.left.left = Node(4)\nroot.left.right = Node(5)\n\n# Test the in-order and pre-order traversals\nin_order_traversal(root)  # Output: 4 2 5 1 3\npre_order_traversal(root)  # Output: 1 2 4 5 3"
        },
        {
          "type": "paragraph",
          "text": "In these recursive tree traversal functions, the function calls itself on the left and right subtrees. The base case is when the `root` is `None`, meaning we\u2019ve reached the end of a branch."
        }
      ]
    },
    {
      "title": "Recursion vs. Iteration",
      "content": [
        {
          "type": "paragraph",
          "text": "Recursion and iteration are two techniques used to solve repetitive problems. Recursion often leads to cleaner, simpler code but can be less efficient than iteration due to the overhead of function calls. Let's compare the two by implementing the same problem using both recursion and iteration."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Factorial using recursion\ndef factorial_recursive(n):\n    if n == 0:\n        return 1\n    return n * factorial_recursive(n - 1)\n\n# Factorial using iteration\ndef factorial_iterative(n):\n    result = 1\n    for i in range(1, n + 1):\n        result *= i\n    return result\n\n# Test both methods\nprint(factorial_recursive(5))  # Output: 120\nprint(factorial_iterative(5))  # Output: 120"
        },
        {
          "type": "paragraph",
          "text": "In this example, both the recursive and iterative implementations of the factorial function produce the same result. However, the iterative version may be more efficient for larger inputs, as it avoids the overhead of recursive function calls."
        }
      ]
    },
    {
      "title": "Common Problems Solved Using Recursion",
      "content": [
        {
          "type": "paragraph",
          "text": "Recursion is particularly well-suited for problems that can be divided into smaller subproblems. Some classic problems that are solved using recursion include:"
        },
        {
          "type": "bullets",
          "items": [
            "**Fibonacci sequence**: Computing the nth Fibonacci number using recursion.",
            "**Merge sort**: A divide-and-conquer algorithm that recursively splits and merges arrays.",
            "**Tower of Hanoi**: A puzzle that requires moving disks between rods while maintaining certain rules.",
            "**Permutations and combinations**: Generating all permutations or combinations of a given set."
          ]
        }
      ]
    },
    {
      "title": "Fibonacci Sequence (Recursive Example)",
      "content": [
        {
          "type": "paragraph",
          "text": "The **Fibonacci sequence** is a sequence of numbers where each number is the sum of the two preceding ones, starting from 0 and 1. The recursive definition of the Fibonacci sequence is:"
        },
        {
          "type": "bullets",
          "items": [
            "`fibonacci(0) = 0` (base case)",
            "`fibonacci(1) = 1` (base case)",
            "`fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2)` (recursive case)"
          ]
        },
        {
          "type": "code",
          "language": "python",
          "code": "def fibonacci(n):\n    if n == 0:\n        return 0\n    elif n == 1:\n        return 1\n    else:\n        return fibonacci(n - 1) + fibonacci(n - 2)\n\n# Test the Fibonacci function\nprint(fibonacci(6))  # Output: 8"
        },
        {
          "type": "paragraph",
          "text": "In this recursive Fibonacci function, the base cases handle `n == 0` and `n == 1`, and the recursive case calculates the Fibonacci number for `n` by summing the two previous Fibonacci numbers."
        }
      ]
    },
    {
      "title": "Backtracking (Another Recursive Technique)",
      "content": [
        {
          "type": "paragraph",
          "text": "**Backtracking** is a recursive technique used to solve constraint satisfaction problems. It builds a solution incrementally, one step at a time, and removes solutions that do not meet the conditions (known as pruning). Problems like the **N-Queens Problem** and **finding all subsets** can be solved using backtracking."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Example: Finding all subsets using backtracking\n\ndef find_subsets(nums):\n    result = []\n\n    def backtrack(start, path):\n        result.append(path)\n        for i in range(start, len(nums)):\n            backtrack(i + 1, path + [nums[i]])\n\n    backtrack(0, [])\n    return result\n\n# Test the find_subsets function\nnums = [1, 2, 3]\nprint(find_subsets(nums))  # Output: [[], [1], [1, 2], [1, 2, 3], [1, 3], [2], [2, 3], [3]]"
        },
        {
          "type": "paragraph",
          "text": "In this backtracking example, we use recursion to generate all possible subsets of a list of numbers. Each recursive call explores a different path (subset), and if the path is valid, it is added to the result."
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this tutorial, we explored the concept of **recursion**, learned how to write recursive functions, and examined common problems that can be solved using recursion. Although recursion simplifies many problems, it is essential to understand its limitations, such as stack overflow and performance overhead."
        }
      ]
    }
  ]
}
