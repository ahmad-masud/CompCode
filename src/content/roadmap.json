[
  {
    "name": "arrays & strings",
    "lessons": [
      "arrays",
      "strings"
    ],
    "data": [
      {
        "ID": 2239,
        "Title": "Find Closest Number to Zero",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/find-closest-number-to-zero",
        "Acceptance": 46,
        "Video": "8VOP4Mm4nFs?si=GMR-G8DNP7sHt-s8",
        "Solutions": [
          {
            "title": "Alternative Approach - Sorting",
            "code": "def findClosestNumber(nums):\n    nums.sort(key=lambda x: (abs(x), -x))\n    return nums[0]",
            "timeComplexity": "O(n log n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n represents the number of elements in the input list nums"
          },
          {
            "title": "Optimal Solution - Linear Time",
            "code": "def findClosestNumber(nums):\n    res = float('inf')\n\n    for n in nums:\n        if abs(n) < abs(res):\n            res = n\n        elif abs(n) == abs(res):\n            res = max(n, res)\n\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n represents the number of elements in the input list nums"
          }
        ]
      },   
      {
        "ID": 1768,
        "Title": "Merge Strings Alternately",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-strings-alternately",
        "Acceptance": 81
      },
      {
        "ID": 13,
        "Title": "Roman to Integer",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/roman-to-integer",
        "Acceptance": 63
      },
      {
        "ID": 392,
        "Title": "Is Subsequence",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/is-subsequence",
        "Acceptance": 48
      },
      {
        "ID": 121,
        "Title": "Best Time to Buy and Sell Stock",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/best-time-to-buy-and-sell-stock",
        "Acceptance": 54
      },
      {
        "ID": 14,
        "Title": "Longest Common Prefix",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-common-prefix",
        "Acceptance": 44
      },
      {
        "ID": 228,
        "Title": "Summary Ranges",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/summary-ranges",
        "Acceptance": 51
      },
      {
        "ID": 238,
        "Title": "Product of Array Except Self",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/product-of-array-except-self",
        "Acceptance": 66
      }
    ]        
  },
  {
    "name": "hashmaps & sets",
    "lessons": [
      "dictionaries",
      "sets"
    ],
    "data": [
      {
        "ID": 1,
        "Title": "Two Sum",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/two-sum",
        "Acceptance": 48,
        "Video": "oetyCTdewlU?si=YVht9LVdy8bIOfaa",
        "Solutions": [
          {
            "title": "Brute Force Solution",
            "code": "def twoSum(nums, target):\n    for i in range(len(nums)):\n        for j in range(i + 1, len(nums)):\n            if nums[i] + nums[j] == target:\n                return [i, j]",
            "timeComplexity": "O(n^2)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Optimal Solution - HashMap",
            "code": "def twoSum(nums, target):\n    num_map = {}\n\n    for i, num in enumerate(nums):\n        diff = target - num\n\n        if diff in num_map:\n            return [num_map[diff], i]\n\n        num_map[num] = i",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },      
      {
        "ID": 136,
        "Title": "Single Number",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/single-number",
        "Acceptance": 70,
        "Video": "YcusSSCLmKQ?si=HaWWVb-YQGNyZv7z",
        "Solutions": [
          {
            "title": "Brute Force Solution - Using Count",
            "code": "def singleNumber(nums):\n    for n in nums:\n        if nums.count(n) == 1:\n            return n",
            "timeComplexity": "O(n^2)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Hash Table Solution",
            "code": "def singleNumber(nums):\n    hash_table = {}\n\n    for n in nums:\n        hash_table[n] = hash_table.get(n, 0) + 1\n\n    for n, count in hash_table.items():\n        if count == 1:\n            return n",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Math Set Solution",
            "code": "def singleNumber(nums):\n    return 2 * sum(set(nums)) - sum(nums)",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Optimal Solution - Using XOR",
            "code": "def singleNumber(nums):\n    res = 0\n\n    for n in nums:\n        res ^= n\n\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },      
      {
        "ID": 3,
        "Title": "Longest Substring Without Repeating Characters",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Acceptance": 34
      },
      {
        "ID": 349,
        "Title": "Intersection of Two Arrays",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/intersection-of-two-arrays",
        "Acceptance": 70,
        "Video": "Lcj_cuZUy68?si=3Gqo9JgWimF9MuRB",
        "Solutions": [
          {
            "title": "Brute Force Solution",
            "code": "def intersection(nums1, nums2):\n    result = []\n\n    for n in nums1:\n        if n in nums2 and n not in result:\n            result.append(n)\n\n    return result",
            "timeComplexity": "O(n * m)",
            "spaceComplexity": "O(min(n, m))",
            "complexityExplanation": "n and m are the sizes of the input lists nums1 and nums2"
          },
          {
            "title": "Hash Set Solution",
            "code": "def intersection(nums1, nums2):\n    set1 = set(nums1)\n    set2 = set(nums2)\n\n    return list(set1 & set2)",
            "timeComplexity": "O(n + m)",
            "spaceComplexity": "O(n + m)",
            "complexityExplanation": "n and m are the sizes of the input lists nums1 and nums2"
          },
          {
            "title": "Two Pointer Solution - Sorted Arrays",
            "code": "def intersection(nums1, nums2):\n    nums1.sort()\n    nums2.sort()\n    i, j = 0, 0\n    result = set()\n\n    while i < len(nums1) and j < len(nums2):\n        if nums1[i] == nums2[j]:\n            result.add(nums1[i])\n            i += 1\n            j += 1\n        elif nums1[i] < nums2[j]:\n            i += 1\n        else:\n            j += 1\n\n    return list(result)",
            "timeComplexity": "O(n log n + m log m)",
            "spaceComplexity": "O(min(n, m))",
            "complexityExplanation": "n and m are the sizes of the input lists nums1 and nums2"
          }
        ]
      },      
      {
        "ID": 242,
        "Title": "Valid Anagram",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/valid-anagram",
        "Acceptance": 61
      },
      {
        "ID": 205,
        "Title": "Isomorphic Strings",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/isomorphic-strings",
        "Acceptance": 41
      },
      {
        "ID": 290,
        "Title": "Word Pattern",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/word-pattern",
        "Acceptance": 41
      },
      {
        "ID": 217,
        "Title": "Contains Duplicate",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/contains-duplicate",
        "Acceptance": 60
      },
      {
        "ID": 451,
        "Title": "Sort Characters By Frequency",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/sort-characters-by-frequency",
        "Acceptance": 65
      },
      {
        "ID": 49,
        "Title": "Group Anagrams",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/group-anagrams",
        "Acceptance": 64
      }
    ]        
  },
  {
    "name": "two pointers",
    "lessons": [
      "arrays",
      "strings",
      "two-pointers"
    ],
    "data": [
      {
        "ID": 167,
        "Title": "Two Sum II - Input Array Is Sorted",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/two-sum-ii-input-array-is-sorted",
        "Acceptance": 59,
        "Video": "-gPXrCoJgHE?si=hcp0dO_s8P5XbAzy"
      },
      {
        "ID": 125,
        "Title": "Valid Palindrome",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/valid-palindrome",
        "Acceptance": 44
      },
      {
        "ID": 344,
        "Title": "Reverse String",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/reverse-string",
        "Acceptance": 77,
        "Video": "QmvMuRcnIZ8?si=yll0E7OyDREY5ogu",
        "Solutions": [
          {
            "title": "Two Pointer Solution",
            "code": "def reverseString(s):\n    l, r = 0, len(s) - 1\n\n    while l < r:\n        s[l], s[r] = s[r], s[l]\n        l += 1\n        r -= 1",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list s"
          },
          {
            "title": "Recursive Solution",
            "code": "def reverseString(s):\n    def helper(l, r):\n        if l >= r:\n            return\n        s[l], s[r] = s[r], s[l]\n        helper(l + 1, r - 1)\n\n    helper(0, len(s) - 1)",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list s"
          }
        ]
      },      
      {
        "ID": 345,
        "Title": "Reverse Vowels of a String",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/reverse-vowels-of-a-string",
        "Acceptance": 48
      },
      {
        "ID": 11,
        "Title": "Container With Most Water",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/container-with-most-water",
        "Acceptance": 59
      },
      {
        "ID": 283,
        "Title": "Move Zeroes",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/move-zeroes",
        "Acceptance": 63
      },
      {
        "ID": 26,
        "Title": "Remove Duplicates from Sorted Array",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/remove-duplicates-from-sorted-array",
        "Acceptance": 52
      },
      {
        "ID": 27,
        "Title": "Remove Element",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/remove-element",
        "Acceptance": 54
      },
      {
        "ID": 1253,
        "Title": "Partition Labels",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/partition-labels",
        "Acceptance": 79
      },
      {
        "ID": 88,
        "Title": "Merge Sorted Array",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-sorted-array",
        "Acceptance": 46
      }
    ]        
  },
  {
    "name": "stacks",
    "lessons": [
      "stacks",
      "queues",
      "monotonic-stacks"
    ],
    "data": [
      {
        "ID": 682,
        "Title": "Baseball Game",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/baseball-game/",
        "Acceptance": 77
      },
      {
        "ID": 20,
        "Title": "Valid Parentheses",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/valid-parentheses",
        "Acceptance": 43,
        "Video": "tTIKa0xXYmk?si=vOAx0G9yA9pV4i7l",
        "Solutions": [
          {
            "title": "Stack Solution",
            "code": "def isValid(s):\n    dic = {')': '(', ']': '[', '}': '{'}\n    stack = []\n\n    for c in s:\n        if c in dic:\n            if not stack:\n                return False\n\n            bracket = stack.pop()\n            if dic[c] != bracket:\n                return False\n        else:\n            stack.append(c)\n\n    return not stack",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of characters in the input string s"
          }
        ]
      },           
      {
        "ID": 155,
        "Title": "Min Stack",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/min-stack",
        "Acceptance": 53
      },
      {
        "ID": 739,
        "Title": "Daily Temperatures",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/daily-temperatures",
        "Acceptance": 67
      },
      {
        "ID": 42,
        "Title": "Trapping Rain Water",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/trapping-rain-water",
        "Acceptance": 61
      },
      {
        "ID": 503,
        "Title": "Next Greater Element II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/next-greater-element-ii",
        "Acceptance": 59
      },
      {
        "ID": 84,
        "Title": "Largest Rectangle in Histogram",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/largest-rectangle-in-histogram",
        "Acceptance": 43
      }
    ]        
  },
  {
    "name": "linked lists",
    "lessons": [
      "singly-linked-lists",
      "two-pointers",
      "doubly-linked-lists"
    ],
    "data": [
      {
        "ID": 206,
        "Title": "Reverse Linked List",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/reverse-linked-list",
        "Acceptance": 70,
        "Video": "skePaM3nA2w?si=dG_NH3eyfnq5FMyE",
        "Solutions": [
          {
            "title": "Iterative Solution",
            "code": "def reverseList(head):\n    prev = None\n    curr = head\n\n    while curr:\n        next_node = curr.next\n        curr.next = prev\n        prev = curr\n        curr = next_node\n\n    return prev",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of nodes in the linked list"
          },
          {
            "title": "Recursive Solution",
            "code": "def reverseList(head):\n    if not head or not head.next:\n        return head\n\n    reversed_head = reverseList(head.next)\n    head.next.next = head\n    head.next = None\n\n    return reversed_head",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of nodes in the linked list"
          }
        ]
      },      
      {
        "ID": 141,
        "Title": "Linked List Cycle",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/linked-list-cycle",
        "Acceptance": 47
      },
      {
        "ID": 21,
        "Title": "Merge Two Sorted Lists",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-two-sorted-lists",
        "Acceptance": 62
      },
      {
        "ID": 19,
        "Title": "Remove Nth Node From End of List",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/remove-nth-node-from-end-of-list",
        "Acceptance": 40
      },
      {
        "ID": 160,
        "Title": "Intersection of Two Linked Lists",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/intersection-of-two-linked-lists",
        "Acceptance": 56
      },
      {
        "ID": 876,
        "Title": "Middle of the Linked List",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/middle-of-the-linked-list",
        "Acceptance": 70
      },
      {
        "ID": 328,
        "Title": "Odd Even Linked List",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/odd-even-linked-list",
        "Acceptance": 57
      },
      {
        "ID": 143,
        "Title": "Reorder List",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/reorder-list",
        "Acceptance": 52
      },
      {
        "ID": 92,
        "Title": "Reverse Linked List II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/reverse-linked-list-ii",
        "Acceptance": 46
      },
      {
        "ID": 138,
        "Title": "Copy List with Random Pointer",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/copy-list-with-random-pointer",
        "Acceptance": 45
      },
      {
        "ID": 23,
        "Title": "Merge k Sorted Lists",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-k-sorted-lists",
        "Acceptance": 45
      },
      {
        "ID": 25,
        "Title": "Reverse Nodes in k-Group",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/reverse-nodes-in-k-group",
        "Acceptance": 48
      },
      {
        "ID": 61,
        "Title": "Rotate List",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/rotate-list",
        "Acceptance": 30
      },
      {
        "ID": 237,
        "Title": "Delete Node in a Linked List",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/delete-node-in-a-linked-list",
        "Acceptance": 81
      },
      {
        "ID": 24,
        "Title": "Swap Nodes in Pairs",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/swap-nodes-in-pairs",
        "Acceptance": 58
      }
    ]        
  },
  {
    "name": "binary search",
    "lessons": [
      "arrays",
      "binary-search"
    ],
    "data": [
      {
        "ID": 704,
        "Title": "Binary Search",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/binary-search",
        "Acceptance": 55,
        "Video": "PBnAF8zxBVw?si=w7JuvitYAtMSDsSI",
        "Solutions": [
          {
            "title": "Iterative Binary Search",
            "code": "def search(nums, target):\n    l, r = 0, len(nums) - 1\n\n    while l <= r:\n        m = l + (r - l) // 2\n\n        if nums[m] == target:\n            return m\n        elif nums[m] < target:\n            l = m + 1\n        else:\n            r = m - 1\n\n    return -1",
            "timeComplexity": "O(log n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Recursive Binary Search",
            "code": "def search(nums, target):\n    def binary_search(l, r):\n        if l > r:\n            return -1\n\n        m = l + (r - l) // 2\n\n        if nums[m] == target:\n            return m\n        elif nums[m] < target:\n            return binary_search(m + 1, r)\n        else:\n            return binary_search(l, m - 1)\n\n    return binary_search(0, len(nums) - 1)",
            "timeComplexity": "O(log n)",
            "spaceComplexity": "O(log n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },      
      {
        "ID": 278,
        "Title": "First Bad Version",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/first-bad-version",
        "Acceptance": 43
      },
      {
        "ID": 35,
        "Title": "Search Insert Position",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/search-insert-position",
        "Acceptance": 44
      },
      {
        "ID": 374,
        "Title": "Guess Number Higher or Lower",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/guess-number-higher-or-lower",
        "Acceptance": 56
      },
      {
        "ID": 33,
        "Title": "Search in Rotated Sorted Array",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/search-in-rotated-sorted-array",
        "Acceptance": 39
      },
      {
        "ID": 34,
        "Title": "Find First and Last Position of Element in Sorted Array",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/find-first-and-last-position-of-element-in-sorted-array",
        "Acceptance": 40
      },
      {
        "ID": 852,
        "Title": "Peak Index in a Mountain Array",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/peak-index-in-a-mountain-array",
        "Acceptance": 70
      }
    ]        
  },
  {
    "name": "sliding window",
    "lessons": [
      "arrays",
      "strings",
      "two-pointers",
      "sliding-window"
    ],
    "data": [
      {
        "ID": 209,
        "Title": "Minimum Size Subarray Sum",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/minimum-size-subarray-sum",
        "Acceptance": 45,
        "Video": "qgsXwaG2nvs?si=wpkI_l6-E8zZjpzM",
        "Solutions": [
          {
            "title": "Brute Force Solution",
            "code": "def minSubArrayLen(target, nums):\n    res = float('inf')\n\n    for i in range(len(nums)):\n        curr_sum = 0\n\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n\n            if curr_sum >= target:\n                res = min(res, j - i + 1)\n                break\n\n    return res if res != float('inf') else 0",
            "timeComplexity": "O(n^2)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Sliding Window Solution",
            "code": "def minSubArrayLen(target, nums):\n    l = 0\n    prefix_sum = 0\n    res = float('inf')\n\n    for r in range(len(nums)):\n        prefix_sum += nums[r]\n\n        while prefix_sum >= target:\n            res = min(res, r - l + 1)\n            prefix_sum -= nums[l]\n            l += 1\n\n    return res if res != float('inf') else 0",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },      
      {
        "ID": 3,
        "Title": "Longest Substring Without Repeating Characters",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-substring-without-repeating-characters",
        "Acceptance": 34
      },
      {
        "ID": 424,
        "Title": "Longest Repeating Character Replacement",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-repeating-character-replacement",
        "Acceptance": 50
      },
      {
        "ID": 567,
        "Title": "Permutation in String",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/permutation-in-string",
        "Acceptance": 45
      },
      {
        "ID": 76,
        "Title": "Minimum Window Substring",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/minimum-window-substring",
        "Acceptance": 40
      },
      {
        "ID": 1004,
        "Title": "Max Consecutive Ones III",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/max-consecutive-ones-iii",
        "Acceptance": 61
      },
      {
        "ID": 239,
        "Title": "Sliding Window Maximum",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/sliding-window-maximum",
        "Acceptance": 47
      }
    ]        
  },
  {
    "name": "trees",
    "lessons": [
      "recursion",
      "binary-trees",
      "binary-search",
      "binary-search-trees",
      "depth-first-search",
      "breadth-first-search"
    ],
    "data": [
      {
        "ID": 104,
        "Title": "Maximum Depth of Binary Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/maximum-depth-of-binary-tree",
        "Acceptance": 76
      },
      {
        "ID": 226,
        "Title": "Invert Binary Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/invert-binary-tree",
        "Acceptance": 72
      },
      {
        "ID": 110,
        "Title": "Balanced Binary Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/balanced-binary-tree",
        "Acceptance": 47
      },
      {
        "ID": 101,
        "Title": "Symmetric Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/symmetric-tree",
        "Acceptance": 53
      },
      {
        "ID": 543,
        "Title": "Diameter of Binary Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/diameter-of-binary-tree",
        "Acceptance": 56
      },
      {
        "ID": 94,
        "Title": "Binary Tree Inorder Traversal",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/binary-tree-inorder-traversal",
        "Acceptance": 71,
        "Video": "MR-F70Hawo8?si=YXJUh-30v4xd-PLh",
        "Solutions": [
          {
            "title": "Recursive Solution",
            "code": "def inorderTraversal(root):\n    res = []\n\n    def dfs(node):\n        if not node:\n            return\n\n        dfs(node.left)\n        res.append(node.val)\n        dfs(node.right)\n\n    dfs(root)\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of nodes in the binary tree"
          },
          {
            "title": "Iterative Solution",
            "code": "def inorderTraversal(root):\n    res = []\n    stack = []\n    curr = root\n\n    while curr or stack:\n        while curr:\n            stack.append(curr)\n            curr = curr.left\n\n        curr = stack.pop()\n        res.append(curr.val)\n        curr = curr.right\n\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of nodes in the binary tree"
          }
        ]
      },      
      {
        "ID": 700,
        "Title": "Search in a Binary Search Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/search-in-a-binary-search-tree",
        "Acceptance": 75
      },
      {
        "ID": 701,
        "Title": "Insert into a Binary Search Tree",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/insert-into-a-binary-search-tree",
        "Acceptance": 72
      },
      {
        "ID": 98,
        "Title": "Validate Binary Search Tree",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/validate-binary-search-tree",
        "Acceptance": 30
      },
      {
        "ID": 450,
        "Title": "Delete Node in a BST",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/delete-node-in-a-bst",
        "Acceptance": 46
      },
      {
        "ID": 235,
        "Title": "Lowest Common Ancestor of a Binary Search Tree",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-search-tree",
        "Acceptance": 59
      },
      {
        "ID": 530,
        "Title": "Minimum Absolute Difference in BST",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/minimum-absolute-difference-in-bst",
        "Acceptance": 57
      },
      {
        "ID": 199,
        "Title": "Binary Tree Right Side View",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/binary-tree-right-side-view",
        "Acceptance": 58
      },
      {
        "ID": 102,
        "Title": "Binary Tree Level Order Traversal",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/binary-tree-level-order-traversal",
        "Acceptance": 63
      }
    ]        
  },
  {
    "name": "tries",
    "lessons": [
      "dictionaries",
      "tries"
    ],
    "data": [
      {
        "ID": 208,
        "Title": "Implement Trie (Prefix Tree)",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/implement-trie-prefix-tree",
        "Acceptance": 56
      },
      {
        "ID": 211,
        "Title": "Design Add and Search Words Data Structure",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/design-add-and-search-words-data-structure",
        "Acceptance": 45
      }          
    ]
  },
  {
    "name": "heaps",
    "lessons": [
      "arrays",
      "heaps"
    ],
    "data": [
      {
        "ID": 215,
        "Title": "Kth Largest Element in an Array",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/kth-largest-element-in-an-array",
        "Acceptance": 64
      },
      {
        "ID": 347,
        "Title": "Top K Frequent Elements",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/top-k-frequent-elements",
        "Acceptance": 64
      },
      {
        "ID": 973,
        "Title": "K Closest Points to Origin",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/k-closest-points-to-origin",
        "Acceptance": 66
      },
      {
        "ID": 703,
        "Title": "Kth Largest Element in a Stream",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/kth-largest-element-in-a-stream",
        "Acceptance": 54
      },
      {
        "ID": 295,
        "Title": "Find Median from Data Stream",
        "Difficulty": "Hard",
        "Leetcode Question Link": "https://leetcode.com/problems/find-median-from-data-stream",
        "Acceptance": 53
      },
      {
        "ID": 1046,
        "Title": "Last Stone Weight",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/last-stone-weight",
        "Acceptance": 64
      }
    ]        
  },
  {
    "name": "intervals",
    "lessons": [
      "arrays",
      "intervals"
    ],
    "data": [
      {
        "ID": 56,
        "Title": "Merge Intervals",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-intervals",
        "Acceptance": 47
      },
      {
        "ID": 57,
        "Title": "Insert Interval",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/insert-interval",
        "Acceptance": 39
      },
      {
        "ID": 435,
        "Title": "Non-overlapping Intervals",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/non-overlapping-intervals",
        "Acceptance": 46
      },
      {
        "ID": 252,
        "Title": "Meeting Rooms",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/meeting-rooms",
        "Acceptance": 56
      },
      {
        "ID": 253,
        "Title": "Meeting Rooms II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/meeting-rooms-ii",
        "Acceptance": 53
      }
    ]        
  },
  {
    "name": "backtracking",
    "lessons": [
      "recursion",
      "backtracking"
    ],
    "data": [
      {
        "ID": 46,
        "Title": "Permutations",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/permutations",
        "Acceptance": 73
      },
      {
        "ID": 78,
        "Title": "Subsets",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/subsets",
        "Acceptance": 76,
        "Video": "GHtOJN7RX-0?si=A1OHau29Wj7RQsUY",
        "Solutions": [
          {
            "title": "Backtracking Solution",
            "code": "def subsets(self, nums: List[int]) -> List[List[int]]:\n    res = []\n\n    def backtrack(i: int, curr: List[int]) -> None:\n        if i == len(nums):\n            res.append(curr)\n            return\n\n        backtrack(i + 1, curr + [nums[i]])\n        backtrack(i + 1, curr)\n\n    backtrack(0, [])\n    return res",
            "timeComplexity": "O(2^n * n)",
            "spaceComplexity": "O(2^n * n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Iterative Solution",
            "code": "def subsets(nums):\n    res = [[]]\n\n    for n in nums:\n        res += [curr + [n] for curr in res]\n\n    return res",
            "timeComplexity": "O(2^n * n)",
            "spaceComplexity": "O(2^n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },            
      {
        "ID": 90,
        "Title": "Subsets II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/subsets-ii",
        "Acceptance": 60
      },
      {
        "ID": 77,
        "Title": "Combinations",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/combinations",
        "Acceptance": 64
      },
      {
        "ID": 22,
        "Title": "Generate Parentheses",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/generate-parentheses",
        "Acceptance": 76
      },
      {
        "ID": 39,
        "Title": "Combination Sum",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/combination-sum",
        "Acceptance": 74
      },
      {
        "ID": 40,
        "Title": "Combination Sum II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/combination-sum-ii",
        "Acceptance": 55
      }
    ]               
  },
  {
    "name": "graphs",
    "lessons": [
      "graphs",
      "adjacency-lists",
      "depth-first-search",
      "breadth-first-search",
      "topological-sort",
      "union-find"
    ],
    "data": [
      {
        "ID": 200,
        "Title": "Number of Islands",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/number-of-islands",
        "Acceptance": 54,
        "Video": "ScvAGc6yBs4?si=qRcnTKoBhYhbcKZT",
        "Solutions": [
          {
            "title": "Depth-First Search (DFS) Solution",
            "code": "def numIslands(grid):\n    ROWS, COLS = len(grid), len(grid[0])\n    res = 0\n\n    def dfs(r: int, c: int) -> None:\n        if r < 0 or c < 0 or r >= ROWS or c >= COLS or grid[r][c] == '0':\n            return\n\n        grid[r][c] = '0'\n\n        dfs(r + 1, c)\n        dfs(r - 1, c)\n        dfs(r, c + 1)\n        dfs(r, c - 1)\n\n    for r in range(ROWS):\n        for c in range(COLS):\n            if grid[r][c] == '1':\n                res += 1\n                dfs(r, c)\n\n    return res",
            "timeComplexity": "O(n * m)",
            "spaceComplexity": "O(n * m)",
            "complexityExplanation": "n and m are the dimensions of the grid"
          },
          {
            "title": "Breadth-First Search (BFS) Solution",
            "code": "def numIslands(grid):\n    ROWS, COLS = len(grid), len(grid[0])\n    res = 0\n\n    def bfs(r: int, c: int) -> None:\n        queue = deque([(r, c)])\n        grid[r][c] = '0'\n\n        while queue:\n            row, col = queue.popleft()\n\n            for dr, dc in [(1, 0), (-1, 0), (0, 1), (0, -1)]:\n                nr, nc = row + dr, col + dc\n\n                if 0 <= nr < ROWS and 0 <= nc < COLS and grid[nr][nc] == '1':\n                    grid[nr][nc] = '0'\n                    queue.append((nr, nc))\n\n    for r in range(ROWS):\n        for c in range(COLS):\n            if grid[r][c] == '1':\n                res += 1\n                bfs(r, c)\n\n    return res",
            "timeComplexity": "O(n * m)",
            "spaceComplexity": "O(min(n, m))",
            "complexityExplanation": "n and m are the dimensions of the grid"
          }
        ]
      },      
      {
        "ID": 547,
        "Title": "Number of Provinces",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/number-of-provinces",
        "Acceptance": 61
      },
      {
        "ID": 695,
        "Title": "Max Area of Island",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/max-area-of-island",
        "Acceptance": 71
      },
      {
        "ID": 1020,
        "Title": "Number of Enclaves",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/number-of-enclaves",
        "Acceptance": 60
      },
      {
        "ID": 133,
        "Title": "Clone Graph",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/clone-graph",
        "Acceptance": 45
      },
      {
        "ID": 994,
        "Title": "Rotting Oranges",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/rotting-oranges",
        "Acceptance": 52
      },
      {
        "ID": 797,
        "Title": "All Paths From Source to Target",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/all-paths-from-source-to-target",
        "Acceptance": 80
      },
      {
        "ID": 207,
        "Title": "Course Schedule",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/course-schedule",
        "Acceptance": 46
      },
      {
        "ID": 323,
        "Title": "Number of Connected Components in an Undirected Graph",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/number-of-connected-components-in-an-undirected-graph",
        "Acceptance": 61
      },
      {
        "ID": 684,
        "Title": "Redundant Connection",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/redundant-connection",
        "Acceptance": 62
      }
    ]
  },
  {
    "name": "dynamic programming",
    "lessons": [
      "recursion",
      "backtracking",
      "dynamic-programming"
    ],
    "data": [
      {
        "ID": 70,
        "Title": "Climbing Stairs",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/climbing-stairs",
        "Acceptance": 52
      },
      {
        "ID": 746,
        "Title": "Min Cost Climbing Stairs",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/min-cost-climbing-stairs",
        "Acceptance": 62
      },
      {
        "ID": 198,
        "Title": "House Robber",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/house-robber",
        "Acceptance": 49
      },
      {
        "ID": 213,
        "Title": "House Robber II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/house-robber-ii",
        "Acceptance": 40
      },
      {
        "ID": 62,
        "Title": "Unique Paths",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/unique-paths",
        "Acceptance": 60
      },
      {
        "ID": 63,
        "Title": "Unique Paths II",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/unique-paths-ii",
        "Acceptance": 39
      },
      {
        "ID": 5,
        "Title": "Longest Palindromic Substring",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-palindromic-substring",
        "Acceptance": 32
      },
      {
        "ID": 300,
        "Title": "Longest Increasing Subsequence",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-increasing-subsequence",
        "Acceptance": 48
      },
      {
        "ID": 1143,
        "Title": "Longest Common Subsequence",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/longest-common-subsequence",
        "Acceptance": 61
      },
      {
        "ID": 152,
        "Title": "Maximum Product Subarray",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/maximum-product-subarray",
        "Acceptance": 34
      }
    ]        
  },
  {
    "name": "bit manipulation",
    "lessons": [
      "bit-manipulation"
    ],
    "data": [
      {
        "ID": 136,
        "Title": "Single Number",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/single-number",
        "Acceptance": 70,
        "Video": "YcusSSCLmKQ?si=HaWWVb-YQGNyZv7z",
        "Solutions": [
          {
            "title": "Brute Force Solution - Using Count",
            "code": "def singleNumber(nums):\n    for n in nums:\n        if nums.count(n) == 1:\n            return n",
            "timeComplexity": "O(n^2)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Hash Table Solution",
            "code": "def singleNumber(nums):\n    hash_table = {}\n\n    for n in nums:\n        hash_table[n] = hash_table.get(n, 0) + 1\n\n    for n, count in hash_table.items():\n        if count == 1:\n            return n",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Math Set Solution",
            "code": "def singleNumber(nums):\n    return 2 * sum(set(nums)) - sum(nums)",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(n)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Optimal Solution - Using XOR",
            "code": "def singleNumber(nums):\n    res = 0\n\n    for n in nums:\n        res ^= n\n\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },
      {
        "ID": 191,
        "Title": "Number of 1 Bits",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/number-of-1-bits",
        "Acceptance": 58
      },
      {
        "ID": 231,
        "Title": "Power of Two",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/power-of-two",
        "Acceptance": 44
      },
      {
        "ID": 338,
        "Title": "Counting Bits",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/counting-bits",
        "Acceptance": 74
      },
      {
        "ID": 268,
        "Title": "Missing Number",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/missing-number",
        "Acceptance": 59
      },
      {
        "ID": 371,
        "Title": "Sum of Two Integers",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/sum-of-two-integers",
        "Acceptance": 51
      },
      {
        "ID": 260,
        "Title": "Single Number III",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/single-number-iii",
        "Acceptance": 66
      },
      {
        "ID": 421,
        "Title": "Maximum XOR of Two Numbers in an Array",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/maximum-xor-of-two-numbers-in-an-array",
        "Acceptance": 54
      }
    ]        
  },
  {
    "name": "greedy",
    "lessons": [
      "dynamic-programming",
      "greedy",
      "kadanes-algorithm"
    ],
    "data": [
      {
        "ID": 53,
        "Title": "Maximum Subarray",
        "Difficulty": "Easy",
        "Leetcode Question Link": "https://leetcode.com/problems/maximum-subarray",
        "Acceptance": 54,
        "Video": "zfBUOrv1u4k?si=P3USqAXRpTLHMnbf",
        "Solutions": [
          {
            "title": "Brute Force Solution",
            "code": "def maxSubArray(nums):\n    max_sum = float('-inf')\n\n    for i in range(len(nums)):\n        curr_sum = 0\n        for j in range(i, len(nums)):\n            curr_sum += nums[j]\n            max_sum = max(max_sum, curr_sum)\n\n    return max_sum",
            "timeComplexity": "O(n^2)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          },
          {
            "title": "Kadane's Algorithm",
            "code": "def maxSubArray(self, nums: List[int]) -> int:\n    res = float('-inf')\n    curr = 0\n\n    for n in nums:\n        curr += n\n        res = max(res, curr)\n\n        if curr < 0:\n            curr = 0\n\n    return res",
            "timeComplexity": "O(n)",
            "spaceComplexity": "O(1)",
            "complexityExplanation": "n is the number of elements in the input list nums"
          }
        ]
      },           
      {
        "ID": 55,
        "Title": "Jump Game",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/jump-game",
        "Acceptance": 38
      },
      {
        "ID": 134,
        "Title": "Gas Station",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/gas-station",
        "Acceptance": 45
      },
      {
        "ID": 846,
        "Title": "Hand of Straights",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/hand-of-straights",
        "Acceptance": 63
      },
      {
        "ID": 1899,
        "Title": "Merge Triplets to Form Target Triplet",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/merge-triplets-to-form-target-triplet",
        "Acceptance": 52
      },
      {
        "ID": 678,
        "Title": "Valid Parenthesis String",
        "Difficulty": "Medium",
        "Leetcode Question Link": "https://leetcode.com/problems/valid-parenthesis-string",
        "Acceptance": 34
      }
    ]        
  }
]
  