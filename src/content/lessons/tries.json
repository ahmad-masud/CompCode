{
  "title": "Tries",
  "type": "datastructure",
  "difficulty": "hard",
  "premium": true,
  "lessons": [
    {
      "title": "Introduction to Tries",
      "content": [
        {
          "type": "paragraph",
          "text": "A Trie (pronounced as 'try') is a tree-like data structure used to store a dynamic set of strings, where each node represents a single character of a string. It is commonly used for prefix matching, autocomplete systems, and dictionary-like lookups."
        },
        {
          "type": "bullets",
          "items": [
            "Each node represents a single character.",
            "A Trie supports efficient prefix lookups, making it ideal for autocomplete systems.",
            "Tries are space-efficient for storing a large number of related strings."
          ]
        }
      ]
    },
    {
      "title": "Trie Node Structure",
      "content": [
        {
          "type": "paragraph",
          "text": "Each node in a Trie contains a dictionary to hold child nodes and a boolean flag to indicate whether the node represents the end of a word."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class TrieNode:\n    def __init__(self):\n        self.children = {}\n        self.is_end_of_word = False"
        },
        {
          "type": "paragraph",
          "text": "In this `TrieNode` class, `children` is a dictionary that stores child nodes, and `is_end_of_word` indicates whether the node marks the end of a complete word."
        }
      ]
    },
    {
      "title": "Trie Structure",
      "content": [
        {
          "type": "paragraph",
          "text": "The `Trie` class manages the root node of the Trie and provides methods to insert words, search for words, and check for prefixes."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class Trie:\n    def __init__(self):\n        self.root = TrieNode()\n\n    def insert(self, word):\n        node = self.root\n        for char in word:\n            if char not in node.children:\n                node.children[char] = TrieNode()\n            node = node.children[char]\n        node.is_end_of_word = True"
        },
        {
          "type": "paragraph",
          "text": "In the `Trie` class, the `insert()` method adds a word to the Trie by traversing or creating nodes for each character in the word."
        }
      ]
    },
    {
      "title": "Inserting Words into a Trie",
      "content": [
        {
          "type": "paragraph",
          "text": "To insert a word into a Trie, traverse the Trie by following or creating nodes for each character in the word. Mark the end of the word by setting the `is_end_of_word` flag to `True`."
        },
        {
          "type": "code",
          "language": "python",
          "code": "trie = Trie()\ntrie.insert('apple')\ntrie.insert('app')\ntrie.insert('apex')\n# The Trie now contains the words 'apple', 'app', and 'apex'"
        },
        {
          "type": "paragraph",
          "text": "In this example, the words 'apple', 'app', and 'apex' are inserted into the Trie. Each word shares common prefixes, making the Trie space-efficient."
        }
      ]
    },
    {
      "title": "Searching for Words in a Trie",
      "content": [
        {
          "type": "paragraph",
          "text": "To search for a word in a Trie, traverse the Trie following the nodes for each character in the word. If the word exists, you should reach a node where `is_end_of_word` is `True`."
        },
        {
          "type": "code",
          "language": "python",
          "code": "def search(self, word):\n    node = self.root\n    for char in word:\n        if char not in node.children:\n            return False\n        node = node.children[char]\n    return node.is_end_of_word"
        },
        {
          "type": "paragraph",
          "text": "This `search()` method checks whether a given word exists in the Trie by traversing the nodes for each character. It returns `True` if the word exists and `False` otherwise."
        }
      ]
    },
    {
      "title": "Prefix Search in a Trie",
      "content": [
        {
          "type": "paragraph",
          "text": "A Trie is particularly useful for prefix searches. To check if a given prefix exists in the Trie, traverse the nodes of the prefix without checking the `is_end_of_word` flag."
        },
        {
          "type": "code",
          "language": "python",
          "code": "def starts_with(self, prefix):\n    node = self.root\n    for char in prefix:\n        if char not in node.children:\n            return False\n        node = node.children[char]\n    return True"
        },
        {
          "type": "paragraph",
          "text": "This `starts_with()` method checks whether a given prefix exists in the Trie by traversing the nodes for each character in the prefix."
        }
      ]
    },
    {
      "title": "Autocomplete Using a Trie",
      "content": [
        {
          "type": "paragraph",
          "text": "One of the most common uses of a Trie is to provide autocomplete suggestions. After checking if a prefix exists in the Trie, you can recursively find all words that begin with that prefix."
        },
        {
          "type": "code",
          "language": "python",
          "code": "def autocomplete(self, prefix):\n    def dfs(node, prefix, result):\n        if node.is_end_of_word:\n            result.append(prefix)\n        for char, child in node.children.items():\n            dfs(child, prefix + char, result)\n\n    node = self.root\n    for char in prefix:\n        if char not in node.children:\n            return []\n        node = node.children[char]\n\n    result = []\n    dfs(node, prefix, result)\n    return result"
        },
        {
          "type": "paragraph",
          "text": "This `autocomplete()` method finds all words in the Trie that start with a given prefix using a depth-first search (DFS) on the Trie from the last node of the prefix."
        }
      ]
    },
    {
      "title": "Deleting Words from a Trie",
      "content": [
        {
          "type": "paragraph",
          "text": "Deleting a word from a Trie involves traversing the Trie to find the word, then unmarking the `is_end_of_word` flag. If nodes become unnecessary (no longer shared by other words), they should be removed."
        },
        {
          "type": "code",
          "language": "python",
          "code": "def delete(self, word):\n    def _delete(node, word, depth):\n        if not node:\n            return False\n        if depth == len(word):\n            if not node.is_end_of_word:\n                return False\n            node.is_end_of_word = False\n            return len(node.children) == 0\n        char = word[depth]\n        if char in node.children and _delete(node.children[char], word, depth + 1):\n            del node.children[char]\n            return len(node.children) == 0\n        return False\n\n    _delete(self.root, word, 0)"
        },
        {
          "type": "paragraph",
          "text": "This `delete()` method recursively finds and removes the word from the Trie. It removes nodes that are no longer part of any other words in the Trie."
        }
      ]
    },
    {
      "title": "Trie Use Cases",
      "content": [
        {
          "type": "paragraph",
          "text": "Tries are widely used in applications where fast retrieval of strings is required, such as:"
        },
        {
          "type": "bullets",
          "items": [
            "Autocomplete systems (e.g., search engine suggestions).",
            "Spell checkers (quickly finding words with a given prefix).",
            "IP routing (where prefixes of IP addresses are used to determine routing paths).",
            "Dictionary or lexicon storage for quick lookups."
          ]
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this tutorial, we covered the basics of Tries, including how to insert, search, and delete words, as well as perform prefix searches and autocomplete. Tries are a powerful data structure for efficiently managing and querying strings with shared prefixes."
        }
      ]
    }
  ]
}
