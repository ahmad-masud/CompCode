{
    "title": "Queues",
    "lessons": [
      {
        "title": "Introduction to Queues",
        "content": [
          {
            "type": "paragraph",
            "text": "A **queue** is a data structure that follows the **FIFO (First In, First Out)** principle. This means that the first element added to the queue is the first one to be removed. Queues are commonly used in scenarios like task scheduling, buffering, and managing resources in a fair order."
          },
          {
            "type": "paragraph",
            "text": "A queue supports two main operations: **enqueue** (to add an element to the end of the queue) and **dequeue** (to remove an element from the front of the queue)."
          },
          {
            "type": "code",
            "language": "python",
            "code": "# Python’s list can be used to simulate a queue, but the collections.deque module is more efficient.\nfrom collections import deque\nqueue = deque()\nqueue.append(1)  # Enqueue\nqueue.append(2)\nprint(queue)  # Output: deque([1, 2])\nqueue.popleft()  # Dequeue\nprint(queue)  # Output: deque([2])"
          }
        ]
      },
      {
        "title": "Basic Queue Operations",
        "content": [
          {
            "type": "paragraph",
            "text": "The most common operations performed on a queue include `enqueue`, `dequeue`, `peek`, and `isEmpty`. Python’s `collections.deque` is optimized for both enqueueing and dequeueing operations from either end of the deque."
          },
          {
            "type": "bullets",
            "items": [
              "`enqueue()`: Adds an element to the back of the queue.",
              "`dequeue()`: Removes and returns the element from the front of the queue.",
              "`peek()`: Returns the element at the front of the queue without removing it.",
              "`isEmpty()`: Checks if the queue is empty."
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "# Simulating basic queue operations\nfrom collections import deque\nqueue = deque()\n\n# Enqueue elements\nqueue.append(10)\nqueue.append(20)\nqueue.append(30)\nprint(queue)  # Output: deque([10, 20, 30])\n\n# Dequeue the front element\nprint(queue.popleft())  # Output: 10\nprint(queue)  # Output: deque([20, 30])\n\n# Peek at the front element\nprint(queue[0])  # Output: 20\n\n# Check if the queue is empty\nprint(len(queue) == 0)  # Output: False"
          }
        ]
      },
      {
        "title": "Common Use Cases of Queues",
        "content": [
          {
            "type": "paragraph",
            "text": "Queues are widely used in computer science and have several important applications, including:"
          },
          {
            "type": "bullets",
            "items": [
              "**Task scheduling**: Queues are used to manage tasks in order of arrival in operating systems.",
              "**Breadth-First Search (BFS)**: BFS traversal of trees and graphs uses a queue to explore nodes level by level.",
              "**Resource management**: Queues are used in managing resources like printers and network bandwidth.",
              "**Buffering**: Queues are used to handle buffering in data streams, such as video streaming."
            ]
          }
        ]
      },
      {
        "title": "Breadth-First Search (BFS) Using Queues",
        "content": [
          {
            "type": "paragraph",
            "text": "One of the most common uses of queues is in implementing the **Breadth-First Search (BFS)** algorithm. BFS explores all nodes at the present depth level before moving on to nodes at the next depth level. It uses a queue to keep track of which node to explore next."
          },
          {
            "type": "code",
            "language": "python",
            "code": "from collections import deque\n\ndef bfs(graph, start):\n    visited = set()\n    queue = deque([start])\n    visited.add(start)\n    while queue:\n        node = queue.popleft()\n        print(node, end=' ')\n        for neighbor in graph[node]:\n            if neighbor not in visited:\n                visited.add(neighbor)\n                queue.append(neighbor)\n\n# Example graph\ngraph = {\n    'A': ['B', 'C'],\n    'B': ['A', 'D', 'E'],\n    'C': ['A', 'F'],\n    'D': ['B'],\n    'E': ['B', 'F'],\n    'F': ['C', 'E']\n}\n\nbfs(graph, 'A')  # Output: A B C D E F"
          },
          {
            "type": "paragraph",
            "text": "In this example, BFS uses a queue to explore all neighbors of a node before moving on to the next node. The queue helps in ensuring that nodes are explored in the correct order."
          }
        ]
      },
      {
        "title": "Implementing a Queue Using a Class",
        "content": [
          {
            "type": "paragraph",
            "text": "While Python’s `deque` module is very efficient for queue operations, we can implement a queue using a class to better encapsulate its behavior."
          },
          {
            "type": "code",
            "language": "python",
            "code": "class Queue:\n    def __init__(self):\n        self.queue = deque()\n\n    def enqueue(self, value):\n        self.queue.append(value)\n\n    def dequeue(self):\n        if not self.is_empty():\n            return self.queue.popleft()\n        return None  # Queue is empty\n\n    def peek(self):\n        if not self.is_empty():\n            return self.queue[0]\n        return None\n\n    def is_empty(self):\n        return len(self.queue) == 0\n\n    def size(self):\n        return len(self.queue)\n\n# Test the Queue class\nqueue = Queue()\nqueue.enqueue(10)\nqueue.enqueue(20)\nprint(queue.peek())  # Output: 10\nprint(queue.dequeue())  # Output: 10\nprint(queue.size())  # Output: 1"
          },
          {
            "type": "paragraph",
            "text": "This `Queue` class encapsulates the basic operations of a queue such as `enqueue`, `dequeue`, `peek`, `is_empty`, and `size` using a `deque` internally for efficient operations."
          }
        ]
      },
      {
        "title": "Circular Queues",
        "content": [
          {
            "type": "paragraph",
            "text": "A **circular queue** is a type of queue where the last position is connected back to the first position, forming a circle. This is useful when managing fixed-size buffers. In a circular queue, if the rear reaches the end of the queue, it wraps around to the front."
          },
          {
            "type": "code",
            "language": "python",
            "code": "class CircularQueue:\n    def __init__(self, size):\n        self.size = size\n        self.queue = [None] * size\n        self.front = self.rear = -1\n\n    def enqueue(self, value):\n        if (self.rear + 1) % self.size == self.front:\n            print('Queue is full!')\n        elif self.front == -1:\n            self.front = self.rear = 0\n            self.queue[self.rear] = value\n        else:\n            self.rear = (self.rear + 1) % self.size\n            self.queue[self.rear] = value\n\n    def dequeue(self):\n        if self.front == -1:\n            print('Queue is empty!')\n        elif self.front == self.rear:\n            self.front = self.rear = -1\n        else:\n            self.front = (self.front + 1) % self.size\n\n    def display(self):\n        if self.front == -1:\n            print('Queue is empty!')\n        else:\n            i = self.front\n            while i != self.rear:\n                print(self.queue[i], end=' ')\n                i = (i + 1) % self.size\n            print(self.queue[self.rear])\n\n# Test CircularQueue\ncq = CircularQueue(5)\ncq.enqueue(1)\ncq.enqueue(2)\ncq.enqueue(3)\ncq.enqueue(4)\ncq.enqueue(5)\ncq.display()  # Output: 1 2 3 4"
          },
          {
            "type": "paragraph",
            "text": "In this example, we create a circular queue of size 5. When the rear of the queue reaches the end of the list, it wraps around to the front if there is space."
          }
        ]
      },
      {
        "title": "Queue vs. Stack",
        "content": [
          {
            "type": "paragraph",
            "text": "While both queues and stacks are fundamental data structures, they differ in the order of removing elements. A **queue** follows the **FIFO (First In, First Out)** principle, while a **stack** follows the **LIFO (Last In, First Out)** principle."
          },
          {
            "type": "bullets",
            "items": [
              "Queues remove the first element added (FIFO).",
              "Stacks remove the last element added (LIFO)."
            ]
          },
          {
            "type": "paragraph",
            "text": "For example, in a queue, the first person in line is served first, while in a stack, the last item placed is the first one to be removed."
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "In this tutorial, we explored the basic operations of queues, their use cases, and common problems that can be solved using queues, such as Breadth-First Search (BFS) and task scheduling. Understanding queues is essential for solving problems that require a FIFO approach."
          }
        ]
      }
    ]
  }  