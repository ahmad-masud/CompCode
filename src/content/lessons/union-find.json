{
    "title": "Union-Find (Disjoint Set Union)",
    "lessons": [
      {
        "title": "Introduction to Union-Find",
        "content": [
          {
            "type": "paragraph",
            "text": "The **Union-Find** data structure, also known as **Disjoint Set Union (DSU)**, is a data structure that tracks a set of elements partitioned into disjoint (non-overlapping) subsets. It supports two main operations: **union** (merging two subsets into one) and **find** (determining which subset a particular element belongs to)."
          },
          {
            "type": "paragraph",
            "text": "Union-Find is widely used in graph-related algorithms such as **Kruskal's Algorithm** for finding Minimum Spanning Trees, and in problems where you need to determine whether two elements are in the same subset or connected component."
          }
        ]
      },
      {
        "title": "Key Operations in Union-Find",
        "content": [
          {
            "type": "bullets",
            "items": [
              "**Find**: This operation determines which subset (or component) a particular element belongs to. It helps to determine if two elements are in the same subset.",
              "**Union**: This operation merges two subsets into a single subset.",
              "**Connected**: This checks if two elements are in the same subset by comparing their roots (leaders)."
            ]
          }
        ]
      },
      {
        "title": "Union-Find Data Structure",
        "content": [
          {
            "type": "paragraph",
            "text": "The Union-Find data structure can be implemented using two key ideas: **path compression** and **union by rank**. These optimizations help improve the efficiency of the `find` and `union` operations."
          },
          {
            "type": "bullets",
            "items": [
              "**Path Compression**: When performing a `find` operation, make the tree flatter by making each node point directly to the root. This reduces the depth of the tree and speeds up future operations.",
              "**Union by Rank**: When performing a `union` operation, attach the smaller tree under the root of the larger tree. This helps keep the tree balanced, minimizing its height."
            ]
          }
        ]
      },
      {
        "title": "Union-Find Implementation",
        "content": [
          {
            "type": "paragraph",
            "text": "Here is a Python implementation of Union-Find with path compression and union by rank:"
          },
          {
            "type": "code",
            "language": "python",
            "code": "# Union-Find (Disjoint Set Union) with Path Compression and Union by Rank\nclass UnionFind:\n    def __init__(self, size):\n        self.root = [i for i in range(size)]  # Initialize each node to be its own parent\n        self.rank = [1] * size  # Initialize rank (tree height) for each node\n\n    def find(self, x):\n        if self.root[x] == x:  # If x is its own root\n            return x\n        # Path compression: make the root of x the root of its parent\n        self.root[x] = self.find(self.root[x])\n        return self.root[x]\n\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            # Union by rank: attach smaller tree under the larger tree's root\n            if self.rank[rootX] > self.rank[rootY]:\n                self.root[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.root[rootX] = rootY\n            else:\n                self.root[rootY] = rootX\n                self.rank[rootX] += 1\n\n    def connected(self, x, y):\n        # Check if two nodes are in the same component\n        return self.find(x) == self.find(y)\n\n# Example usage\nuf = UnionFind(10)  # Create 10 disjoint sets (0 to 9)\nuf.union(1, 2)\nuf.union(2, 5)\nuf.union(5, 6)\nuf.union(6, 7)\nuf.union(3, 8)\nuf.union(8, 9)\nprint(uf.connected(1, 5))  # Output: True\nprint(uf.connected(1, 3))  # Output: False\nuf.union(5, 3)\nprint(uf.connected(1, 3))  # Output: True"
          },
          {
            "type": "paragraph",
            "text": "In this implementation, each node starts as its own root. The `find()` function uses path compression to reduce the tree's height, and `union()` uses union by rank to keep the tree balanced."
          }
        ]
      },
      {
        "title": "Path Compression",
        "content": [
          {
            "type": "paragraph",
            "text": "In the Union-Find structure, **path compression** is an optimization that speeds up the `find()` operation. When finding the root of a node, path compression makes all nodes in the path point directly to the root, effectively flattening the tree. This reduces the depth of the tree and speeds up future `find()` operations."
          },
          {
            "type": "code",
            "language": "python",
            "code": "# Path compression in the find() operation\n    def find(self, x):\n        if self.root[x] != x:\n            self.root[x] = self.find(self.root[x])  # Path compression\n        return self.root[x]"
          },
          {
            "type": "paragraph",
            "text": "The above implementation ensures that during the `find()` operation, all nodes encountered on the path to the root will point directly to the root."
          }
        ]
      },
      {
        "title": "Union by Rank",
        "content": [
          {
            "type": "paragraph",
            "text": "**Union by Rank** is an optimization technique that keeps the Union-Find trees balanced by attaching the tree with lower rank (height) to the root of the tree with a higher rank. This prevents the tree from growing too tall, making both `union()` and `find()` operations more efficient."
          },
          {
            "type": "code",
            "language": "python",
            "code": "# Union by rank in the union() operation\n    def union(self, x, y):\n        rootX = self.find(x)\n        rootY = self.find(y)\n        if rootX != rootY:\n            if self.rank[rootX] > self.rank[rootY]:\n                self.root[rootY] = rootX\n            elif self.rank[rootX] < self.rank[rootY]:\n                self.root[rootX] = rootY\n            else:\n                self.root[rootY] = rootX\n                self.rank[rootX] += 1"
          },
          {
            "type": "paragraph",
            "text": "With union by rank, we compare the rank (height) of two trees, and the smaller tree is attached under the root of the larger tree. If both trees have the same rank, we arbitrarily choose one as the root and increment its rank."
          }
        ]
      },
      {
        "title": "Complexity of Union-Find",
        "content": [
          {
            "type": "paragraph",
            "text": "With the optimizations of path compression and union by rank, the time complexity of the **find** and **union** operations becomes almost constant, or **O(α(n))**, where **α** is the inverse Ackermann function. For all practical purposes, this is very close to **O(1)**."
          },
          {
            "type": "paragraph",
            "text": "Without these optimizations, the worst-case time complexity for **find** and **union** would be **O(n)**, as the trees could become unbalanced and tall."
          }
        ]
      },
      {
        "title": "Applications of Union-Find",
        "content": [
          {
            "type": "paragraph",
            "text": "The Union-Find data structure is widely used in many graph-related algorithms and real-world applications. Some common use cases include:"
          },
          {
            "type": "bullets",
            "items": [
              "**Cycle Detection**: Union-Find can be used to detect cycles in an undirected graph by checking if two vertices belong to the same subset.",
              "**Kruskal's Algorithm**: For finding the Minimum Spanning Tree of a graph, Union-Find helps in efficiently checking if adding an edge creates a cycle.",
              "**Connected Components**: Union-Find helps in determining connected components in a graph by grouping vertices into subsets.",
              "**Network Connectivity**: In network connectivity problems, Union-Find helps to determine if two nodes (e.g., computers) are in the same network."
            ]
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "In this tutorial, we explored the **Union-Find** data structure, also known as **Disjoint Set Union (DSU)**. We learned about the core operations of `find()` and `union()`, and the optimizations of path compression and union by rank. Union-Find is a powerful tool for solving problems related to connected components, cycle detection, and graph partitioning, making it an essential data structure in computer science."
          }
        ]
      }
    ]
  }  