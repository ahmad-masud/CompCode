{
  "title": "Doubly Linked Lists",
  "type": "datastructure",
  "difficulty": "medium",
  "lessons": [
    {
      "title": "Introduction to Doubly Linked Lists",
      "content": [
        {
          "type": "paragraph",
          "text": "A **doubly linked list** is a linear data structure consisting of nodes, where each node contains three components: a **data** field, a **next** pointer that points to the next node, and a **prev** pointer that points to the previous node. This allows traversal of the list in both directions."
        },
        {
          "type": "paragraph",
          "text": "Unlike a singly linked list, where nodes only point to the next node, in a doubly linked list, nodes maintain links to both their previous and next neighbors. This makes certain operations, like deletion and backward traversal, more efficient."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# A basic structure of a doubly linked list node\nclass Node:\n    def __init__(self, data):\n        self.data = data  # Data stored in the node\n        self.next = None  # Pointer to the next node\n        self.prev = None  # Pointer to the previous node\n\n# Creating a doubly linked list node\na = Node(1)\nb = Node(2)\na.next = b  # Link node a to node b\nb.prev = a  # Link node b back to node a"
        },
        {
          "type": "paragraph",
          "text": "In this example, we define a `Node` class for the doubly linked list, where each node contains `data`, a pointer to the `next` node, and a pointer to the `prev` node."
        }
      ]
    },
    {
      "title": "Basic Operations on Doubly Linked Lists",
      "content": [
        {
          "type": "paragraph",
          "text": "Common operations that can be performed on a doubly linked list include:"
        },
        {
          "type": "bullets",
          "items": [
            "**Insertion**: Adding a node at the beginning, end, or middle of the list.",
            "**Deletion**: Removing a node by value or position.",
            "**Traversal**: Navigating through the list both forwards and backwards.",
            "**Search**: Finding a node with a specific value."
          ]
        }
      ]
    },
    {
      "title": "Insertion into a Doubly Linked List",
      "content": [
        {
          "type": "paragraph",
          "text": "Insertion into a doubly linked list can be done at various positions such as the **head** (beginning) or **tail** (end), or between two nodes in the **middle** of the list."
        },
        {
          "type": "code",
          "language": "python",
          "code": "# Class representing the doubly linked list\nclass DoublyLinkedList:\n    def __init__(self):\n        self.head = None  # Head points to the first node\n\n    # Insert a node at the beginning\n    def insert_at_head(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n        else:\n            new_node.next = self.head\n            self.head.prev = new_node\n            self.head = new_node\n\n    # Insert a node at the end\n    def insert_at_tail(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        temp = self.head\n        while temp.next:\n            temp = temp.next\n        temp.next = new_node\n        new_node.prev = temp"
        },
        {
          "type": "paragraph",
          "text": "In this code, we define two methods for inserting nodes: `insert_at_head()` to insert at the beginning and `insert_at_tail()` to insert at the end of the list. Notice how both `next` and `prev` pointers are adjusted when inserting a node."
        }
      ]
    },
    {
      "title": "Forward Traversal of a Doubly Linked List",
      "content": [
        {
          "type": "paragraph",
          "text": "Traversing a doubly linked list is similar to a singly linked list, but you can traverse in both directions. Here\u2019s how to perform **forward traversal** from the head to the tail."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_tail(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        temp = self.head\n        while temp.next:\n            temp = temp.next\n        temp.next = new_node\n        new_node.prev = temp\n\n    # Method to traverse the list forward\n    def traverse_forward(self):\n        temp = self.head\n        while temp:\n            print(temp.data, end=' -> ')\n            temp = temp.next\n        print('None')\n\n# Test the forward traversal method\ndll = DoublyLinkedList()\ndll.insert_at_tail(1)\ndll.insert_at_tail(2)\ndll.insert_at_tail(3)\ndll.traverse_forward()  # Output: 1 -> 2 -> 3 -> None"
        },
        {
          "type": "paragraph",
          "text": "The `traverse_forward()` method iterates through the list, starting from the head, and prints the data in each node until the end of the list."
        }
      ]
    },
    {
      "title": "Backward Traversal of a Doubly Linked List",
      "content": [
        {
          "type": "paragraph",
          "text": "Since doubly linked lists have pointers to both the next and previous nodes, we can also traverse the list **backwards**, starting from the tail and moving towards the head."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_tail(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        temp = self.head\n        while temp.next:\n            temp = temp.next\n        temp.next = new_node\n        new_node.prev = temp\n\n    # Method to traverse the list backward\n    def traverse_backward(self):\n        temp = self.head\n        if not temp:\n            return\n        while temp.next:\n            temp = temp.next  # Go to the last node\n        while temp:\n            print(temp.data, end=' -> ')\n            temp = temp.prev\n        print('None')\n\n# Test the backward traversal method\ndll = DoublyLinkedList()\ndll.insert_at_tail(1)\ndll.insert_at_tail(2)\ndll.insert_at_tail(3)\ndll.traverse_backward()  # Output: 3 -> 2 -> 1 -> None"
        },
        {
          "type": "paragraph",
          "text": "The `traverse_backward()` method starts from the last node (tail) and moves backward, printing the data of each node."
        }
      ]
    },
    {
      "title": "Deletion from a Doubly Linked List",
      "content": [
        {
          "type": "paragraph",
          "text": "Nodes in a doubly linked list can be deleted by updating the `prev` and `next` pointers of the neighboring nodes. This makes deletion more efficient since you have access to both previous and next nodes."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_tail(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        temp = self.head\n        while temp.next:\n            temp = temp.next\n        temp.next = new_node\n        new_node.prev = temp\n\n    # Method to delete a node by value\n    def delete_by_value(self, key):\n        temp = self.head\n\n        # If the head node itself holds the key\n        if temp and temp.data == key:\n            self.head = temp.next\n            if self.head:\n                self.head.prev = None\n            temp = None\n            return\n\n        # Search for the node to be deleted\n        while temp and temp.data != key:\n            temp = temp.next\n\n        if temp is None:\n            return\n\n        # Unlink the node\n        if temp.next:\n            temp.next.prev = temp.prev\n        if temp.prev:\n            temp.prev.next = temp.next\n        temp = None\n\n# Test the deletion method\ndll = DoublyLinkedList()\ndll.insert_at_tail(1)\ndll.insert_at_tail(2)\ndll.insert_at_tail(3)\ndll.traverse_forward()  # Output: 1 -> 2 -> 3 -> None\ndll.delete_by_value(2)\ndll.traverse_forward()  # Output: 1 -> 3 -> None"
        },
        {
          "type": "paragraph",
          "text": "In the `delete_by_value()` method, we update the `next` pointer of the previous node and the `prev` pointer of the next node to bypass the node being deleted."
        }
      ]
    },
    {
      "title": "Reversing a Doubly Linked List",
      "content": [
        {
          "type": "paragraph",
          "text": "Reversing a doubly linked list involves swapping the `next` and `prev` pointers of each node and then updating the head to point to the new first node."
        },
        {
          "type": "code",
          "language": "python",
          "code": "class DoublyLinkedList:\n    def __init__(self):\n        self.head = None\n\n    def insert_at_tail(self, data):\n        new_node = Node(data)\n        if not self.head:\n            self.head = new_node\n            return\n        temp = self.head\n        while temp.next:\n            temp = temp.next\n        temp.next = new_node\n        new_node.prev = temp\n\n    def traverse_forward(self):\n        temp = self.head\n        while temp:\n            print(temp.data, end=' -> ')\n            temp = temp.next\n        print('None')\n\n    # Method to reverse the doubly linked list\n    def reverse(self):\n        temp = None\n        current = self.head\n\n        # Swap next and prev for all nodes\n        while current:\n            temp = current.prev\n            current.prev = current.next\n            current.next = temp\n            current = current.prev\n\n        # Update the head to point to the new first node\n        if temp:\n            self.head = temp.prev\n\n# Test the reverse method\ndll = DoublyLinkedList()\ndll.insert_at_tail(1)\ndll.insert_at_tail(2)\ndll.insert_at_tail(3)\ndll.traverse_forward()  # Output: 1 -> 2 -> 3 -> None\ndll.reverse()\ndll.traverse_forward()  # Output: 3 -> 2 -> 1 -> None"
        },
        {
          "type": "paragraph",
          "text": "In the `reverse()` method, we iterate through the list and swap the `next` and `prev` pointers of each node. Finally, we update the head to point to the new first node."
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this tutorial, we explored the **doubly linked list** data structure, including how to insert, traverse (both forward and backward), delete, and reverse nodes in the list. Doubly linked lists provide greater flexibility than singly linked lists due to the ability to traverse in both directions, making them more efficient for certain operations like deletion."
        }
      ]
    }
  ]
}
