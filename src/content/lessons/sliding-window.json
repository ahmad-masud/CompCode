{
    "title": "Sliding Window",
    "lessons": [
      {
        "title": "Introduction to Sliding Window",
        "content": [
          {
            "type": "paragraph",
            "text": "The sliding window technique is a common approach to solving problems involving sequences, such as arrays or strings. It is used to maintain a subset of elements from the sequence that 'slides' over it to process a problem more efficiently."
          },
          {
            "type": "bullets",
            "items": [
              "The sliding window approach is useful for finding subarrays or substrings that meet specific criteria.",
              "It can be implemented using a fixed-size window or a dynamic window that grows or shrinks as needed.",
              "This technique reduces the need for nested loops, improving the time complexity in many cases."
            ]
          }
        ]
      },
      {
        "title": "Fixed-size Sliding Window",
        "content": [
          {
            "type": "paragraph",
            "text": "In the fixed-size sliding window, the window size is predefined, and the window slides over the sequence by adding a new element and removing the oldest element as it progresses."
          },
          {
            "type": "code",
            "language": "python",
            "code": "def max_sum_subarray(arr, k):\n    max_sum = float('-inf')\n    current_sum = sum(arr[:k])\n\n    for i in range(k, len(arr)):\n        current_sum += arr[i] - arr[i - k]\n        max_sum = max(max_sum, current_sum)\n\n    return max_sum\n\narr = [2, 1, 5, 1, 3, 2]\nk = 3\nprint(max_sum_subarray(arr, k))  # Output: 9"
          },
          {
            "type": "paragraph",
            "text": "In this example, we calculate the maximum sum of a subarray of size `k`. We slide the window by subtracting the element that's left behind and adding the new element. This reduces the time complexity to O(n), compared to a brute-force O(n*k) approach."
          }
        ]
      },
      {
        "title": "Dynamic-size Sliding Window",
        "content": [
          {
            "type": "paragraph",
            "text": "In dynamic-size sliding window problems, the window expands or contracts based on certain conditions. This is commonly used to solve problems that require finding the smallest or largest subarray meeting a condition."
          },
          {
            "type": "code",
            "language": "python",
            "code": "def min_subarray_sum(arr, target):\n    left = 0\n    current_sum = 0\n    min_length = float('inf')\n\n    for right in range(len(arr)):\n        current_sum += arr[right]\n        while current_sum >= target:\n            min_length = min(min_length, right - left + 1)\n            current_sum -= arr[left]\n            left += 1\n\n    return min_length if min_length != float('inf') else 0\n\narr = [2, 3, 1, 2, 4, 3]\ntarget = 7\nprint(min_subarray_sum(arr, target))  # Output: 2"
          },
          {
            "type": "paragraph",
            "text": "This example solves the problem of finding the smallest subarray whose sum is greater than or equal to a target value. The window dynamically grows by adding elements, and contracts by moving the left pointer when the condition is met."
          }
        ]
      },
      {
        "title": "Sliding Window for Strings",
        "content": [
          {
            "type": "paragraph",
            "text": "The sliding window technique can also be applied to strings for problems such as finding substrings or determining whether two strings are anagrams."
          },
          {
            "type": "code",
            "language": "python",
            "code": "def find_anagrams(s, p):\n    from collections import Counter\n    p_count = Counter(p)\n    s_count = Counter()\n    result = []\n    left = 0\n\n    for right in range(len(s)):\n        s_count[s[right]] += 1\n        if right >= len(p):\n            if s_count[s[left]] == 1:\n                del s_count[s[left]]\n            else:\n                s_count[s[left]] -= 1\n            left += 1\n        if s_count == p_count:\n            result.append(left)\n\n    return result\n\ns = \"cbaebabacd\"\np = \"abc\"\nprint(find_anagrams(s, p))  # Output: [0, 6]"
          },
          {
            "type": "paragraph",
            "text": "This example finds all the starting indices of anagrams of string `p` in string `s`. The sliding window is used to maintain the frequency count of characters in the current window of `s`, and we compare it with the frequency count of `p`."
          }
        ]
      },
      {
        "title": "Example: Maximum Sliding Window",
        "content": [
          {
            "type": "paragraph",
            "text": "Given an array, the task is to find the maximum value in every sliding window of size `k`. This can be efficiently solved using a deque (double-ended queue) to keep track of the maximum element."
          },
          {
            "type": "code",
            "language": "python",
            "code": "from collections import deque\n\ndef max_sliding_window(nums, k):\n    dq = deque()\n    result = []\n\n    for i in range(len(nums)):\n        # Remove elements not within the sliding window\n        if dq and dq[0] == i - k:\n            dq.popleft()\n        # Remove smaller elements as they are not useful\n        while dq and nums[dq[-1]] < nums[i]:\n            dq.pop()\n        dq.append(i)\n        # Add the maximum for this window\n        if i >= k - 1:\n            result.append(nums[dq[0]])\n\n    return result\n\nnums = [1, 3, -1, -3, 5, 3, 6, 7]\nk = 3\nprint(max_sliding_window(nums, k))  # Output: [3, 3, 5, 5, 6, 7]"
          },
          {
            "type": "paragraph",
            "text": "In this example, we use a deque to efficiently maintain the indices of the maximum elements within each sliding window. The time complexity is O(n), as each element is added and removed from the deque at most once."
          }
        ]
      },
      {
        "title": "When to Use Sliding Window",
        "content": [
          {
            "type": "paragraph",
            "text": "The sliding window technique is ideal for solving problems where you need to find a subarray or substring that meets a certain condition. It is most effective when the problem can be simplified by considering a window of elements rather than using brute-force nested loops."
          },
          {
            "type": "bullets",
            "items": [
              "Problems involving subarrays or substrings of fixed or variable length.",
              "Optimization problems that require finding the maximum, minimum, or sum within a subset of the data.",
              "Problems that involve comparisons or frequency counts over a sequence."
            ]
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "The sliding window technique is a powerful tool for optimizing solutions to problems that involve sequences. Whether working with arrays or strings, using a sliding window allows you to reduce the time complexity by avoiding unnecessary recomputation, making it an essential strategy for efficient problem solving."
          }
        ]
      }
    ]
  }  