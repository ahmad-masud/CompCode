{
  "title": "Arrays",
  "type": "datastructure",
  "difficulty": "easy",
  "lessons": [
    {
      "title": "Introduction to Arrays",
      "content": [
        {
          "type": "paragraph",
          "text": "An array is a data structure used to store multiple elements in a single variable. In Python, the most common way to represent arrays is through **lists**, which are dynamic in nature. Python also supports **static arrays** through the `array` module. In this tutorial, we\u2019ll explore both static and dynamic arrays."
        }
      ]
    },
    {
      "title": "Static Arrays",
      "content": [
        {
          "type": "paragraph",
          "text": "Static arrays have a fixed size and hold elements of the same type. They are more memory efficient and faster when working with large datasets of the same type. Python\u2019s `array` module allows us to create static arrays."
        },
        {
          "type": "code",
          "language": "python",
          "code": "import array as arr\nmy_static_array = arr.array('i', [1, 2, 3, 4])\nprint(my_static_array)  # Output: array('i', [1, 2, 3, 4])"
        },
        {
          "type": "paragraph",
          "text": "In this example, we define a static array of integers (`'i'` stands for integer). Python provides different type codes, such as `'f'` for floats and `'u'` for Unicode characters."
        }
      ]
    },
    {
      "title": "Dynamic Arrays (Lists)",
      "content": [
        {
          "type": "paragraph",
          "text": "Dynamic arrays in Python are represented using **lists**. Lists can grow or shrink in size and can hold elements of different data types, making them more versatile than static arrays."
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_dynamic_array = [1, 'apple', 3.14]\nprint(my_dynamic_array)  # Output: [1, 'apple', 3.14]"
        },
        {
          "type": "paragraph",
          "text": "As shown in this example, a Python list can hold elements of different data types such as integers, strings, and floats."
        }
      ]
    },
    {
      "title": "Common Operations on Dynamic Arrays",
      "content": [
        {
          "type": "paragraph",
          "text": "Dynamic arrays (lists) support several built-in operations. Let\u2019s explore some of the common operations on lists."
        },
        {
          "type": "bullets",
          "items": [
            "`append()`: Adds an element to the end of the list",
            "`insert()`: Inserts an element at a specified position",
            "`pop()`: Removes the element at a specified index",
            "`remove()`: Removes the first occurrence of a specified value",
            "`extend()`: Adds elements from another list to the current list"
          ]
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_dynamic_array = [1, 2, 3]\nmy_dynamic_array.append(4)\nprint(my_dynamic_array)  # Output: [1, 2, 3, 4]\nmy_dynamic_array.remove(2)\nprint(my_dynamic_array)  # Output: [1, 3, 4]"
        },
        {
          "type": "paragraph",
          "text": "In this example, we added an element to the end of the list using `append()` and removed an element using `remove()`."
        }
      ]
    },
    {
      "title": "Looping Through Arrays (Lists)",
      "content": [
        {
          "type": "paragraph",
          "text": "There are several ways to iterate over the elements of an array (list) in Python. Let\u2019s explore three common methods."
        }
      ]
    },
    {
      "title": "Method 1: Using a For Loop",
      "content": [
        {
          "type": "paragraph",
          "text": "The simplest way to loop through an array is using a `for` loop. This method iterates over each element in the array."
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_dynamic_array = [1, 2, 3, 4]\nfor item in my_dynamic_array:\n    print(item)"
        }
      ]
    },
    {
      "title": "Method 2: Using enumerate()",
      "content": [
        {
          "type": "paragraph",
          "text": "The `enumerate()` function allows you to access both the index and the value of the elements during iteration."
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_dynamic_array = [1, 2, 3, 4]\nfor index, item in enumerate(my_dynamic_array):\n    print(f'Index: {index}, Item: {item}')"
        }
      ]
    },
    {
      "title": "Method 3: List Comprehension",
      "content": [
        {
          "type": "paragraph",
          "text": "List comprehensions provide a compact syntax for creating new lists from existing lists."
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_dynamic_array = [1, 2, 3, 4]\nsquared_array = [x**2 for x in my_dynamic_array]\nprint(squared_array)  # Output: [1, 4, 9, 16]"
        }
      ]
    },
    {
      "title": "Multidimensional Arrays (Nested Lists)",
      "content": [
        {
          "type": "paragraph",
          "text": "In Python, lists can be nested to create multidimensional arrays, such as matrices. Each element in a list can be another list."
        },
        {
          "type": "code",
          "language": "python",
          "code": "matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor row in matrix:\n    print(row)"
        },
        {
          "type": "paragraph",
          "text": "In this example, we created a 3x3 matrix using nested lists."
        }
      ]
    },
    {
      "title": "Slicing Arrays",
      "content": [
        {
          "type": "paragraph",
          "text": "Slicing allows you to retrieve a subset of elements from an array. The slicing syntax is `[start:stop:step]`, where `start` is the index to begin the slice, `stop` is the index to end the slice (exclusive), and `step` is the interval."
        },
        {
          "type": "code",
          "language": "python",
          "code": "my_array = [1, 2, 3, 4, 5]\nprint(my_array[1:4])  # Output: [2, 3, 4]\nprint(my_array[::2])  # Output: [1, 3, 5]"
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this lesson, we explored static arrays using Python\u2019s `array` module, dynamic arrays using lists, common operations, string manipulation, looping techniques, and slicing. Arrays are a foundational data structure that provides efficient ways to store and manipulate collections of data."
        }
      ]
    }
  ]
}
