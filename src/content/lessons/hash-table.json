{
    "title": "Hash Tables",
    "lessons": [
      {
        "title": "Introduction to Hash Tables",
        "content": [
          {
            "type": "paragraph",
            "text": "A hash table (also known as a hash map) is a data structure that stores key-value pairs. It uses a hash function to compute an index into an array of buckets or slots, from which the desired value can be found. Hash tables provide efficient lookup, insertion, and deletion operations, typically in constant time O(1)."
          },
          {
            "type": "bullets",
            "items": [
              "Key-value pairs are stored in a hash table.",
              "A hash function maps keys to specific buckets.",
              "Common operations: insertion, deletion, and lookup."
            ]
          }
        ]
      },
      {
        "title": "Hash Tables in Python",
        "content": [
          {
            "type": "paragraph",
            "text": "Python provides built-in support for hash tables using the `dict` type. A dictionary is a collection of key-value pairs where each key is unique and mapped to a value."
          },
          {
            "type": "bullets",
            "items": [
              "Keys must be immutable types (e.g., strings, numbers, tuples).",
              "Values can be of any type (e.g., lists, strings, numbers)."
            ]
          }
        ]
      },
      {
        "title": "Creating a Dictionary (Hash Table)",
        "content": [
          {
            "type": "paragraph",
            "text": "To create a hash table (dictionary) in Python, you can use curly braces `{}` or the `dict()` constructor."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_dict = {'apple': 1, 'banana': 2, 'orange': 3}\n# OR\nmy_dict = dict(apple=1, banana=2, orange=3)"
          },
          {
            "type": "paragraph",
            "text": "In this example, `my_dict` is a hash table where keys are the fruit names, and values are numbers representing quantities."
          }
        ]
      },
      {
        "title": "Basic Hash Table Operations",
        "content": [
          {
            "type": "paragraph",
            "text": "Hash tables (dictionaries) in Python support basic operations like adding, retrieving, and deleting key-value pairs."
          },
          {
            "type": "bullets",
            "items": [
              "`Adding an item`: Use `dict[key] = value` to add a new key-value pair.",
              "`Retrieving a value`: Use `dict[key]` to get the value for a specific key.",
              "`Deleting an item`: Use `del dict[key]` to remove a key-value pair.",
              "`Checking existence`: Use `key in dict` to check if a key exists in the hash table."
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_dict = {'apple': 1, 'banana': 2}\n\n# Add or update a key-value pair\nmy_dict['orange'] = 3\n\n# Retrieve a value\nprint(my_dict['banana'])  # Output: 2\n\n# Delete a key-value pair\ndel my_dict['apple']\nprint(my_dict)  # Output: {'banana': 2, 'orange': 3}\n\n# Check if a key exists\nprint('banana' in my_dict)  # Output: True"
          }
        ]
      },
      {
        "title": "Handling Collisions in Hash Tables",
        "content": [
          {
            "type": "paragraph",
            "text": "When two different keys hash to the same index, a collision occurs. Python dictionaries handle collisions using an open addressing method where elements are stored in a linked list (or another method depending on the implementation). As a user, you don't need to manually manage collisions when using Python's built-in dictionaries."
          },
          {
            "type": "paragraph",
            "text": "In custom hash table implementations, collision resolution methods such as chaining and open addressing are used."
          }
        ]
      },
      {
        "title": "Iterating Through a Dictionary",
        "content": [
          {
            "type": "paragraph",
            "text": "You can iterate through the keys, values, or key-value pairs of a hash table using loops."
          },
          {
            "type": "bullets",
            "items": [
              "`keys()`: Returns a view object of the dictionary's keys.",
              "`values()`: Returns a view object of the dictionary's values.",
              "`items()`: Returns a view object of the dictionary's key-value pairs."
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_dict = {'apple': 1, 'banana': 2, 'orange': 3}\n\n# Iterating over keys\nfor key in my_dict.keys():\n    print(key)\n\n# Iterating over values\nfor value in my_dict.values():\n    print(value)\n\n# Iterating over key-value pairs\nfor key, value in my_dict.items():\n    print(f'{key}: {value}')"
          }
        ]
      },
      {
        "title": "Hash Table Use Cases",
        "content": [
          {
            "type": "paragraph",
            "text": "Hash tables are commonly used in scenarios where fast lookups are required, such as:"
          },
          {
            "type": "bullets",
            "items": [
              "Database indexing",
              "Caching",
              "Counting frequencies of elements",
              "Removing duplicates from a list",
              "Implementing associative arrays or dictionaries"
            ]
          }
        ]
      },
      {
        "title": "Counting Frequencies with a Hash Table",
        "content": [
          {
            "type": "paragraph",
            "text": "One of the most common uses of hash tables is counting the frequency of elements in a list. This can be done easily using a dictionary."
          },
          {
            "type": "code",
            "language": "python",
            "code": "fruits = ['apple', 'banana', 'orange', 'apple', 'orange', 'apple']\nfruit_count = {}\n\nfor fruit in fruits:\n    if fruit in fruit_count:\n        fruit_count[fruit] += 1\n    else:\n        fruit_count[fruit] = 1\n\nprint(fruit_count)  # Output: {'apple': 3, 'banana': 1, 'orange': 2}"
          },
          {
            "type": "paragraph",
            "text": "In this example, the dictionary `fruit_count` keeps track of how many times each fruit appears in the list."
          }
        ]
      },
      {
        "title": "Handling Missing Keys with get() and setdefault()",
        "content": [
          {
            "type": "paragraph",
            "text": "In Python, attempting to access a key that does not exist in the dictionary will raise a `KeyError`. However, you can handle missing keys more gracefully using the `get()` method or the `setdefault()` method."
          },
          {
            "type": "bullets",
            "items": [
              "`get()`: Returns the value for a key if it exists, or a default value if the key is missing.",
              "`setdefault()`: Returns the value for a key if it exists, or inserts the key with a default value if it does not."
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_dict = {'apple': 1, 'banana': 2}\n\n# Using get() to handle missing keys\nprint(my_dict.get('orange', 0))  # Output: 0\n\n# Using setdefault() to insert a key if missing\nmy_dict.setdefault('orange', 3)\nprint(my_dict)  # Output: {'apple': 1, 'banana': 2, 'orange': 3}"
          }
        ]
      },
      {
        "title": "Custom Hash Table Implementation",
        "content": [
          {
            "type": "paragraph",
            "text": "You can also implement your own hash table using a list of lists or a list of linked lists (for collision resolution) in Python. Here is an example of a simple custom hash table implementation using chaining for collision resolution."
          },
          {
            "type": "code",
            "language": "python",
            "code": "class HashTable:\n    def __init__(self, size):\n        self.size = size\n        self.table = [[] for _ in range(size)]\n\n    def _hash(self, key):\n        return hash(key) % self.size\n\n    def insert(self, key, value):\n        index = self._hash(key)\n        for pair in self.table[index]:\n            if pair[0] == key:\n                pair[1] = value\n                return\n        self.table[index].append([key, value])\n\n    def get(self, key):\n        index = self._hash(key)\n        for pair in self.table[index]:\n            if pair[0] == key:\n                return pair[1]\n        return None\n\n    def delete(self, key):\n        index = self._hash(key)\n        for i, pair in enumerate(self.table[index]):\n            if pair[0] == key:\n                del self.table[index][i]\n                return\n\nhash_table = HashTable(10)\nhash_table.insert('apple', 1)\nhash_table.insert('banana', 2)\nprint(hash_table.get('apple'))  # Output: 1\nhash_table.delete('apple')\nprint(hash_table.get('apple'))  # Output: None"
          },
          {
            "type": "paragraph",
            "text": "This custom hash table implementation uses chaining to handle collisions. Each slot in the table is a list that holds key-value pairs."
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "In this tutorial, we explored the basics of hash tables in Python, how to create and use them with dictionaries, how to handle missing keys, and a simple custom implementation. Hash tables are a powerful data structure for managing key-value pairs with efficient lookups and insertions."
          }
        ]
      }
    ]
  }  