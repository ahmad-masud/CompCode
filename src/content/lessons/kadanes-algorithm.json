{
  "title": "Kadanes Algorithm",
  "type": "algorithm",
  "difficulty": "easy",
  "premium": true,
  "lessons": [
    {
      "title": "Introduction to Kadane's Algorithm",
      "content": [
        {
          "type": "paragraph",
          "text": "**Kadane\u2019s Algorithm** is a dynamic programming algorithm used to find the **maximum sum subarray** in a given array of integers (both positive and negative). The goal is to find the contiguous subarray within a one-dimensional array that has the largest sum."
        },
        {
          "type": "paragraph",
          "text": "Kadane\u2019s Algorithm is efficient with a time complexity of **O(n)**, making it one of the most optimal solutions for the maximum subarray sum problem."
        }
      ]
    },
    {
      "title": "Problem Statement",
      "content": [
        {
          "type": "paragraph",
          "text": "Given an array of integers, both positive and negative, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum."
        },
        {
          "type": "bullets",
          "items": [
            "For example, given the array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]`, the subarray with the largest sum is `[4, -1, 2, 1]`, which has a sum of `6`."
          ]
        }
      ]
    },
    {
      "title": "Kadane\u2019s Algorithm Approach",
      "content": [
        {
          "type": "paragraph",
          "text": "Kadane\u2019s Algorithm works by maintaining two variables as it iterates through the array: `current_sum`, which stores the sum of the current subarray, and `max_sum`, which stores the maximum sum encountered so far."
        },
        {
          "type": "bullets",
          "items": [
            "At each index, update `current_sum` to be the maximum of the current element alone or the current element added to the previous `current_sum`.",
            "Update `max_sum` to be the maximum of `max_sum` and `current_sum`."
          ]
        }
      ]
    },
    {
      "title": "Kadane\u2019s Algorithm Implementation",
      "content": [
        {
          "type": "code",
          "language": "python",
          "code": "# Kadane's Algorithm to find the maximum sum subarray\ndef kadane(arr):\n    max_sum = arr[0]\n    current_sum = arr[0]\n    for i in range(1, len(arr)):\n        current_sum = max(arr[i], current_sum + arr[i])\n        max_sum = max(max_sum, current_sum)\n    return max_sum\n\n# Example usage\narr = [-2, 1, -3, 4, -1, 2, 1, -5, 4]\nprint('Maximum Sum Subarray:', kadane(arr))  # Output: 6"
        },
        {
          "type": "paragraph",
          "text": "In this implementation, we start by initializing both `max_sum` and `current_sum` to the first element of the array. As we iterate through the array, `current_sum` is updated to be either the current element or the sum of the current element and the previous `current_sum`. The `max_sum` keeps track of the highest sum encountered."
        }
      ]
    },
    {
      "title": "Kadane's Algorithm Example Walkthrough",
      "content": [
        {
          "type": "paragraph",
          "text": "Let\u2019s step through an example array `[-2, 1, -3, 4, -1, 2, 1, -5, 4]` to see how Kadane\u2019s Algorithm works."
        },
        {
          "type": "bullets",
          "items": [
            "**Step 1**: Start with `max_sum = -2` and `current_sum = -2`.",
            "**Step 2**: At index 1, compare `arr[1] = 1` with `current_sum + arr[1] = -1`. The maximum is `1`, so `current_sum = 1` and update `max_sum = 1`.",
            "**Step 3**: At index 2, compare `arr[2] = -3` with `current_sum + arr[2] = -2`. The maximum is `-2`, so `current_sum = -2` and `max_sum` remains `1`.",
            "**Step 4**: At index 3, compare `arr[3] = 4` with `current_sum + arr[3] = 2`. The maximum is `4`, so `current_sum = 4` and update `max_sum = 4`.",
            "**Step 5**: Continue similarly, and at index 6, the maximum sum subarray is `[4, -1, 2, 1]` with `max_sum = 6`."
          ]
        }
      ]
    },
    {
      "title": "Edge Cases",
      "content": [
        {
          "type": "paragraph",
          "text": "Kadane\u2019s Algorithm handles edge cases gracefully, including arrays with all negative numbers and arrays with a single element."
        },
        {
          "type": "bullets",
          "items": [
            "**All negative numbers**: Kadane\u2019s Algorithm will return the largest negative number. For example, in `[-3, -2, -1]`, the result will be `-1`.",
            "**Single element**: If the array has only one element, the result will be the element itself."
          ]
        }
      ]
    },
    {
      "title": "Time and Space Complexity",
      "content": [
        {
          "type": "paragraph",
          "text": "**Time Complexity**: The time complexity of Kadane\u2019s Algorithm is **O(n)**, where `n` is the number of elements in the array. This is because we only traverse the array once."
        },
        {
          "type": "paragraph",
          "text": "**Space Complexity**: The space complexity is **O(1)** since we are using only a constant amount of extra space (for `current_sum` and `max_sum`)."
        }
      ]
    },
    {
      "title": "Applications of Kadane's Algorithm",
      "content": [
        {
          "type": "paragraph",
          "text": "Kadane\u2019s Algorithm is widely used in problems where finding the maximum sum subarray is required. Some practical applications include:"
        },
        {
          "type": "bullets",
          "items": [
            "**Stock Market Analysis**: Finding the maximum profit over a series of stock prices.",
            "**Contiguous Subarrays**: Kadane's Algorithm can be extended to multidimensional arrays or applied to various subarray problems in dynamic programming.",
            "**Temperature Data**: Analyzing temperature changes over a period to find the period with the greatest increase."
          ]
        }
      ]
    },
    {
      "title": "Conclusion",
      "content": [
        {
          "type": "paragraph",
          "text": "In this tutorial, we covered **Kadane\u2019s Algorithm**, which provides an efficient way to find the maximum sum subarray in an array. With a time complexity of **O(n)**, it is optimal for solving this problem. Understanding Kadane\u2019s Algorithm is important for tackling a variety of problems in dynamic programming."
        }
      ]
    }
  ]
}
