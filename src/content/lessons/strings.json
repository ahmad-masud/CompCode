{
    "title": "Strings",
    "lessons": [
      {
        "title": "Introduction to Strings",
        "content": [
          {
            "type": "paragraph",
            "text": "A string in Python is a sequence of characters enclosed in single (`'`) or double (`\"`) quotes. Strings are immutable, which means once a string is created, it cannot be modified. However, you can create new strings based on operations applied to the existing string."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello, World!'\nprint(my_string)  # Output: Hello, World!"
          },
          {
            "type": "paragraph",
            "text": "In Python, you can easily perform operations like slicing, concatenation, and checking for substrings using built-in methods."
          }
        ]
      },
      {
        "title": "Basic String Operations",
        "content": [
          {
            "type": "paragraph",
            "text": "Python provides several built-in methods for working with strings. Some of the most common operations include:"
          },
          {
            "type": "bullets",
            "items": [
              "`len()`: Returns the length of the string.",
              "`lower()`: Converts the string to lowercase.",
              "`upper()`: Converts the string to uppercase.",
              "`replace()`: Replaces a substring with another substring.",
              "`split()`: Splits the string into a list of substrings.",
              "`find()`: Returns the index of the first occurrence of a substring."
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello, World!'\nprint(len(my_string))  # Output: 13\nprint(my_string.lower())  # Output: hello, world!\nprint(my_string.replace('World', 'Python'))  # Output: Hello, Python!"
          }
        ]
      },
      {
        "title": "String Slicing",
        "content": [
          {
            "type": "paragraph",
            "text": "Slicing is a powerful feature in Python that allows you to extract a portion of a string. The basic syntax is `string[start:stop:step]`. You can omit any of the three parameters to use default values."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello, World!'\nprint(my_string[0:5])  # Output: Hello\nprint(my_string[:5])   # Output: Hello\nprint(my_string[7:])   # Output: World!\nprint(my_string[::-1]) # Output: !dlroW ,olleH"
          },
          {
            "type": "paragraph",
            "text": "In the examples, we extract substrings and even reverse the string using the slicing technique. You can use negative indices to count from the end of the string."
          }
        ]
      },
      {
        "title": "String Concatenation",
        "content": [
          {
            "type": "paragraph",
            "text": "String concatenation means combining multiple strings into one. In Python, you can concatenate strings using the `+` operator or `join()` method for a more efficient approach."
          },
          {
            "type": "code",
            "language": "python",
            "code": "str1 = 'Hello'\nstr2 = 'World'\nresult = str1 + ', ' + str2 + '!'  # Using +\nprint(result)  # Output: Hello, World!\nresult = ' '.join([str1, str2])  # Using join()\nprint(result)  # Output: Hello World"
          },
          {
            "type": "paragraph",
            "text": "The `join()` method is more efficient when concatenating a large number of strings compared to using `+`."
          }
        ]
      },
      {
        "title": "String Formatting",
        "content": [
          {
            "type": "paragraph",
            "text": "Python provides several ways to format strings, including the older `%` formatting, `str.format()` method, and the modern `f-strings` introduced in Python 3.6."
          },
          {
            "type": "bullets",
            "items": [
              "Using `%`: `'Hello %s' % 'World'`",
              "Using `str.format()`: `'Hello {}'.format('World')`",
              "Using `f-strings`: `f'Hello {name}'`"
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "name = 'Python'\nprint('Hello, %s!' % name)               # Output: Hello, Python!\nprint('Hello, {}!'.format(name))         # Output: Hello, Python!\nprint(f'Hello, {name}!')                 # Output: Hello, Python!"
          },
          {
            "type": "paragraph",
            "text": "Among these, **f-strings** are the most concise and readable, and they also support embedding expressions."
          }
        ]
      },
      {
        "title": "Checking for Substrings",
        "content": [
          {
            "type": "paragraph",
            "text": "You can check if a substring is present in a string using the `in` keyword or `find()` method. The `in` keyword returns a boolean, while `find()` returns the index of the substring or `-1` if the substring is not found."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello, World!'\nprint('World' in my_string)  # Output: True\nprint(my_string.find('World'))  # Output: 7\nprint(my_string.find('Python'))  # Output: -1"
          }
        ]
      },
      {
        "title": "String Immutability",
        "content": [
          {
            "type": "paragraph",
            "text": "Strings in Python are immutable, which means you cannot change the contents of a string after itâ€™s created. Instead, any operation that appears to modify a string actually creates a new string."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello, World!'\nnew_string = my_string.replace('World', 'Python')\nprint(new_string)  # Output: Hello, Python!\nprint(my_string)   # Output: Hello, World!"
          },
          {
            "type": "paragraph",
            "text": "As shown, the `replace()` method creates a new string, leaving the original string unchanged."
          }
        ]
      },
      {
        "title": "Escape Characters",
        "content": [
          {
            "type": "paragraph",
            "text": "Sometimes, you may need to include special characters in a string. Python provides escape sequences, which start with a backslash (`\\`). Common escape sequences include:"
          },
          {
            "type": "bullets",
            "items": [
              "`\\n`: Newline",
              "`\\t`: Tab",
              "`\\'`: Single quote",
              "`\\\"`: Double quote",
              "`\\\\`: Backslash"
            ]
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello\\nWorld!'\nprint(my_string)  # Output: Hello (newline) World!\n\nquote = 'She said, \\'Hello!\\''\nprint(quote)  # Output: She said, 'Hello!'"
          }
        ]
      },
      {
        "title": "Looping Through Strings",
        "content": [
          {
            "type": "paragraph",
            "text": "Strings are iterable in Python, meaning you can loop through each character in the string. The most common way to loop through a string is using a `for` loop."
          },
          {
            "type": "code",
            "language": "python",
            "code": "my_string = 'Hello'\nfor char in my_string:\n    print(char)"
          },
          {
            "type": "paragraph",
            "text": "In this example, we print each character of the string."
          }
        ]
      },
      {
        "title": "Multiline Strings",
        "content": [
          {
            "type": "paragraph",
            "text": "In Python, you can create multiline strings using triple quotes (`'''` or `\"\"\"`). This is useful for large text blocks or when formatting is important."
          },
          {
            "type": "code",
            "language": "python",
            "code": "multi_line_string = '''This is\na multiline\nstring.'''\nprint(multi_line_string)"
          },
          {
            "type": "paragraph",
            "text": "Multiline strings maintain their format and can span across multiple lines."
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "In this tutorial, we explored how to create, manipulate, and format strings in Python. Strings are an essential data structure, and understanding their behavior, immutability, and available operations is crucial for programming in Python."
          }
        ]
      }
    ]
  }  