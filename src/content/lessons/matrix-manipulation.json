{
    "title": "Matrix Multiplication",
    "lessons": [
      {
        "title": "Introduction to Matrix Multiplication",
        "content": [
          {
            "type": "paragraph",
            "text": "Matrix multiplication is a mathematical operation that produces a matrix from two matrices. It involves taking the dot product of rows and columns of the two matrices to compute each element in the resulting matrix."
          },
          {
            "type": "bullets",
            "items": [
              "Matrix multiplication is not element-wise, unlike scalar or matrix addition.",
              "For matrix multiplication to be possible, the number of columns in the first matrix must equal the number of rows in the second matrix."
            ]
          }
        ]
      },
      {
        "title": "Matrix Multiplication Formula",
        "content": [
          {
            "type": "paragraph",
            "text": "Given two matrices A and B, the element at position (i, j) in the resulting matrix C is computed as the dot product of the i-th row of A and the j-th column of B:"
          },
          {
            "type": "code",
            "language": "python",
            "code": "C[i][j] = sum(A[i][k] * B[k][j] for k in range(num_columns_A))"
          },
          {
            "type": "paragraph",
            "text": "This formula shows that each element in the resulting matrix C is the sum of the products of corresponding elements from the row of A and the column of B."
          }
        ]
      },
      {
        "title": "Example of Matrix Multiplication",
        "content": [
          {
            "type": "code",
            "language": "python",
            "code": "def matrix_multiply(A, B):\n    result = [[0 for _ in range(len(B[0]))] for _ in range(len(A))]\n    for i in range(len(A)):\n        for j in range(len(B[0])):\n            for k in range(len(B)):\n                result[i][j] += A[i][k] * B[k][j]\n    return result\n\nA = [[1, 2, 3], [4, 5, 6]]\nB = [[7, 8], [9, 10], [11, 12]]\nresult = matrix_multiply(A, B)\nfor row in result:\n    print(row)\n# Output:\n# [58, 64]\n# [139, 154]"
          },
          {
            "type": "paragraph",
            "text": "In this example, matrix A has dimensions 2x3, and matrix B has dimensions 3x2. The result is a matrix of dimensions 2x2. Each element of the result is computed as the dot product of the corresponding row from A and column from B."
          }
        ]
      },
      {
        "title": "Conditions for Matrix Multiplication",
        "content": [
          {
            "type": "paragraph",
            "text": "Matrix multiplication is defined only when the number of columns in the first matrix is equal to the number of rows in the second matrix."
          },
          {
            "type": "bullets",
            "items": [
              "Matrix A has dimensions m x n (m rows, n columns).",
              "Matrix B has dimensions n x p (n rows, p columns).",
              "The resulting matrix C will have dimensions m x p."
            ]
          }
        ]
      },
      {
        "title": "Time Complexity of Matrix Multiplication",
        "content": [
          {
            "type": "paragraph",
            "text": "The time complexity of standard matrix multiplication is O(m * n * p), where m, n, and p are the dimensions of the two matrices being multiplied. This represents the three nested loops required to compute the result."
          },
          {
            "type": "bullets",
            "items": [
              "Strassen's algorithm can reduce this complexity to approximately O(n^2.81).",
              "Fast matrix multiplication algorithms like Strassen’s are used in cases where matrices are large."
            ]
          }
        ]
      },
      {
        "title": "Matrix Multiplication Using NumPy",
        "content": [
          {
            "type": "paragraph",
            "text": "In Python, the NumPy library provides an efficient and optimized way to perform matrix multiplication using the `dot()` function."
          },
          {
            "type": "code",
            "language": "python",
            "code": "import numpy as np\n\nA = np.array([[1, 2, 3], [4, 5, 6]])\nB = np.array([[7, 8], [9, 10], [11, 12]])\nresult = np.dot(A, B)\nprint(result)\n# Output:\n# [[ 58  64]\n#  [139 154]]"
          },
          {
            "type": "paragraph",
            "text": "In this example, `np.dot()` performs matrix multiplication efficiently, avoiding the need for manually implementing nested loops."
          }
        ]
      },
      {
        "title": "Properties of Matrix Multiplication",
        "content": [
          {
            "type": "bullets",
            "items": [
              "Associative: (AB)C = A(BC)",
              "Distributive: A(B + C) = AB + AC",
              "Not Commutative: AB ≠ BA in general",
              "Identity Matrix: Multiplying any matrix by the identity matrix results in the original matrix (AI = IA = A)."
            ]
          }
        ]
      },
      {
        "title": "Matrix Multiplication in Linear Transformations",
        "content": [
          {
            "type": "paragraph",
            "text": "Matrix multiplication is widely used in linear transformations. Each column of a transformation matrix represents a different linear transformation, and multiplying a matrix by a vector transforms that vector according to the matrix."
          },
          {
            "type": "code",
            "language": "python",
            "code": "A = [[2, 0], [0, 2]]\nvector = [[1], [1]]\n\nresult = matrix_multiply(A, vector)\nprint(result)  # Output: [[2], [2]]"
          },
          {
            "type": "paragraph",
            "text": "In this example, the matrix `A` represents a scaling transformation that doubles the size of vectors. Multiplying `A` by the vector `[1, 1]` scales the vector to `[2, 2]`."
          }
        ]
      },
      {
        "title": "Conclusion",
        "content": [
          {
            "type": "paragraph",
            "text": "Matrix multiplication is a fundamental operation in mathematics and computer science, especially in fields like linear algebra, graphics, machine learning, and physics. Understanding how it works, its properties, and optimizations like NumPy or advanced algorithms can greatly improve the performance of applications dealing with large matrices."
          }
        ]
      }
    ]
  }
  