{
  "title": "Kadanes Algorithm",
  "questions": [
    {
      "id": 1,
      "explanation": {
        "content": [
          {
            "type": "paragraph",
            "text": "Kadane's Algorithm is used to find the **maximum sum subarray** in a given array. It works by maintaining a running sum and updating the maximum encountered sum as it traverses the array."
          },
          {
            "type": "code",
            "language": "python",
            "code": "def kadane(arr):\n    max_current = max_global = arr[0]\n    for i in range(1, len(arr)):\n        max_current = max(arr[i], max_current + arr[i])\n        if max_current > max_global:\n            max_global = max_current\n    return max_global"
          },
          {
            "type": "bullets",
            "items": [
              "Keeps track of the **current maximum sum** at each step.",
              "Updates the **global maximum sum** when a new maximum is found."
            ]
          }
        ]
      },
      "question": "What does Kadane's Algorithm find in a given array?",
      "options": [
        "Minimum element",
        "Maximum sum subarray",
        "Median element",
        "Sum of all elements"
      ],
      "answerIndex": 1,
      "explanationAfterAnswer": "Kadane's Algorithm finds the maximum sum subarray by maintaining a running sum and updating the maximum encountered sum."
    },
    {
      "id": 2,
      "explanation": {
        "content": [
          {
            "type": "paragraph",
            "text": "Consider an array with a mix of positive and negative numbers: **[3, -2, 5, -1, 6, -3, 2, -1, 4]**. Kadane's Algorithm finds the subarray with the maximum sum by selectively including or excluding elements."
          },
          {
            "type": "paragraph",
            "text": "The algorithm uses a comparison between the current element and the sum including the current element."
          }
        ]
      },
      "question": "What is the maximum sum subarray for [3, -2, 5, -1, 6, -3, 2, -1, 4]?",
      "options": [
        "[3, -2, 5]",
        "[5, -1, 6, -3]",
        "[5, -1, 6, -3, 2, -1, 4]",
        "[3, -2, 5, -1, 6]"
      ],
      "answerIndex": 2,
      "explanationAfterAnswer": "The maximum sum subarray for the given array is [5, -1, 6, -3, 2, -1, 4]."
    },
    {
      "id": 3,
      "explanation": {
        "content": [
          {
            "type": "paragraph",
            "text": "Kadane's Algorithm can handle arrays with all **negative** numbers. In this case, it will select the maximum single element as the maximum sum subarray."
          },
          {
            "type": "code",
            "language": "python",
            "code": "arr = [-3, -1, -2, -4]\nprint(kadane(arr))  # Output: -1"
          },
          {
            "type": "paragraph",
            "text": "The algorithm compares the current element with the sum including the current element."
          }
        ]
      },
      "question": "What does Kadane's Algorithm return for an array of all negative numbers?",
      "options": [
        "0",
        "Sum of all elements",
        "Maximum single element",
        "Minimum single element"
      ],
      "answerIndex": 2,
      "explanationAfterAnswer": "For an array of all negative numbers, Kadane's Algorithm returns the maximum single element."
    },
    {
      "id": 4,
      "explanation": {
        "content": [
          {
            "type": "paragraph",
            "text": "Suppose you are given a large array of **stock prices** where each element represents the price of the stock on a given day. Kadane's Algorithm can be modified to find the **maximum profit** that can be made by buying and selling the stock."
          },
          {
            "type": "paragraph",
            "text": "The algorithm focuses on calculating the difference between prices and finding the subarray with the maximum sum of differences."
          }
        ]
      },
      "question": "How would you modify Kadane's Algorithm to find the maximum profit from stock prices?",
      "options": [
        "Track the minimum price",
        "Calculate maximum differences",
        "Sort the prices",
        "Find the sum of prices"
      ],
      "answerIndex": 1,
      "explanationAfterAnswer": "To find the maximum profit, you calculate the maximum differences between stock prices using a modified Kadane's approach."
    },
    {
      "id": 5,
      "explanation": {
        "content": [
          {
            "type": "paragraph",
            "text": "Kadane's Algorithm works in **O(n)** time complexity, where n is the length of the array. It achieves this by iterating over the array once."
          },
          {
            "type": "bullets",
            "items": [
              "Optimal for finding maximum sum subarrays.",
              "Does not require additional space."
            ]
          }
        ]
      },
      "question": "What is the time complexity of Kadane's Algorithm?",
      "options": ["O(n^2)", "O(log n)", "O(n)", "O(1)"],
      "answerIndex": 2,
      "explanationAfterAnswer": "Kadane's Algorithm works in O(n) time complexity by iterating over the array once."
    }
  ]
}
